//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class Service {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    validate(body: JsonReportOfInjury | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Dev/validate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processValidate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processValidate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processValidate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    mapReportToXml(body: JsonReportOfInjury | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Dev/mapReportToXml";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMapReportToXml(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMapReportToXml(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processMapReportToXml(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    mapReportToIntakePayload(body: JsonReportOfInjury | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Dev/mapReportToIntakePayload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMapReportToIntakePayload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMapReportToIntakePayload(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processMapReportToIntakePayload(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    generatePdfForReport(body: JsonReportOfInjury | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Dev/generatePdfForReport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGeneratePdfForReport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGeneratePdfForReport(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGeneratePdfForReport(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    generateFlattenedReport(body: JsonReportOfInjury | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Dev/generateFlattenedReport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGenerateFlattenedReport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateFlattenedReport(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGenerateFlattenedReport(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Drafts for User
     * @return Success
     */
    draftsGET(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Drafts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDraftsGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDraftsGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDraftsGET(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Initial Draft Save
     * @param body (optional) The draft to save
     * @return Created
     */
    draftsPOST(body: SaveDraftRequestDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Drafts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDraftsPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDraftsPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDraftsPOST(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 418) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result418: any = null;
            let resultData418 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result418 = ProblemDetails.fromJS(resultData418);
            return throwException("Client Error", status, _responseText, _headers, result418);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get Draft
     * @param draftId The draft ID
     * @return Success
     */
    draftsGET2(draftId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Drafts/{draftId}";
        if (draftId === undefined || draftId === null)
            throw new Error("The parameter 'draftId' must be defined.");
        url_ = url_.replace("{draftId}", encodeURIComponent("" + draftId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDraftsGET2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDraftsGET2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDraftsGET2(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update a Draft
     * @param body (optional) 
     * @return Created
     */
    draftsPUT(draftId: string, body: SaveDraftRequestDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Drafts/{draftId}";
        if (draftId === undefined || draftId === null)
            throw new Error("The parameter 'draftId' must be defined.");
        url_ = url_.replace("{draftId}", encodeURIComponent("" + draftId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDraftsPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDraftsPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDraftsPUT(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 418) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result418: any = null;
            let resultData418 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result418 = ProblemDetails.fromJS(resultData418);
            return throwException("Client Error", status, _responseText, _headers, result418);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete Draft
     * @return Success
     */
    draftsDELETE(draftId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Drafts/{draftId}";
        if (draftId === undefined || draftId === null)
            throw new Error("The parameter 'draftId' must be defined.");
        url_ = url_.replace("{draftId}", encodeURIComponent("" + draftId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDraftsDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDraftsDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDraftsDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getValidationResult(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/MockIntegration/getValidationResult/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetValidationResult(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetValidationResult(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetValidationResult(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getSubmission(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/MockIntegration/getSubmission/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSubmission(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSubmission(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetSubmission(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param sectionName (optional) 
     * @param body (optional) 
     * @return Success
     */
    submit(sectionName: string | undefined, body: JsonReportOfInjury | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/MockIntegration/submit?";
        if (sectionName === null)
            throw new Error("The parameter 'sectionName' cannot be null.");
        else if (sectionName !== undefined)
            url_ += "sectionName=" + encodeURIComponent("" + sectionName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSubmit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSubmit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSubmit(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Submit a report to CMS
     * @param draftId ID of the draft in the repository associated with this submission
     * @param jsonSchemaVersion (optional) JSON Schema Version of the submission
     * @param body (optional) Report Of Injury submission
     * @return Success
     */
    submit2(draftId: string, jsonSchemaVersion: number | undefined, body: JsonReportOfInjury | undefined): Observable<ReportOfInjuryResponse> {
        let url_ = this.baseUrl + "/api/v1/WorkerInjuryReport/submit/{draftId}?";
        if (draftId === undefined || draftId === null)
            throw new Error("The parameter 'draftId' must be defined.");
        url_ = url_.replace("{draftId}", encodeURIComponent("" + draftId));
        if (jsonSchemaVersion === null)
            throw new Error("The parameter 'jsonSchemaVersion' cannot be null.");
        else if (jsonSchemaVersion !== undefined)
            url_ += "jsonSchemaVersion=" + encodeURIComponent("" + jsonSchemaVersion) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSubmit2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSubmit2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReportOfInjuryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReportOfInjuryResponse>;
        }));
    }

    protected processSubmit2(response: HttpResponseBase): Observable<ReportOfInjuryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReportOfInjuryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 418) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result418: any = null;
            let resultData418 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result418 = ProblemDetails.fromJS(resultData418);
            return throwException("Client Error", status, _responseText, _headers, result418);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get user information from the Token
     * @return Success
     */
    getUserInformation(): Observable<WorkerInformationDto> {
        let url_ = this.baseUrl + "/api/v1/WorkerInjuryReport/getUserInformation";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserInformation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserInformation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WorkerInformationDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WorkerInformationDto>;
        }));
    }

    protected processGetUserInformation(response: HttpResponseBase): Observable<WorkerInformationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkerInformationDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export type AcceptedModifiedDuties = "Yes" | "No" | "Undecided";

export type AccidentInvolved = "AnimalBite" | "Assault" | "MotorVehicle" | "Other" | "None" | "HomeOwnerProperty";

export class AdditionalCompenstations implements IAdditionalCompenstations {
    bonuses?: boolean | null;
    holidays?: boolean | null;
    holidayPayPercentage?: number | null;
    livingOutAllowance?: boolean | null;
    overtime?: boolean | null;
    overtimeHours?: number | null;
    overtimePeriod?: Period;
    overtimeRegularDays?: DaySelection;
    roomAndBoard?: boolean | null;
    roomAndBoardAffectedByInjury?: boolean | null;
    shiftDifferentialsPremiums?: boolean | null;
    tips?: boolean | null;
    tipsAverageAmount?: number | null;
    tipsPeriod?: Period;
    other?: boolean | null;
    describeOther?: string | null;
    totalEarnings12WeeksPriorToInjury?: number | null;

    constructor(data?: IAdditionalCompenstations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bonuses = _data["bonuses"] !== undefined ? _data["bonuses"] : <any>null;
            this.holidays = _data["holidays"] !== undefined ? _data["holidays"] : <any>null;
            this.holidayPayPercentage = _data["holidayPayPercentage"] !== undefined ? _data["holidayPayPercentage"] : <any>null;
            this.livingOutAllowance = _data["livingOutAllowance"] !== undefined ? _data["livingOutAllowance"] : <any>null;
            this.overtime = _data["overtime"] !== undefined ? _data["overtime"] : <any>null;
            this.overtimeHours = _data["overtimeHours"] !== undefined ? _data["overtimeHours"] : <any>null;
            this.overtimePeriod = _data["overtimePeriod"] !== undefined ? _data["overtimePeriod"] : <any>null;
            this.overtimeRegularDays = _data["overtimeRegularDays"] ? DaySelection.fromJS(_data["overtimeRegularDays"]) : <any>null;
            this.roomAndBoard = _data["roomAndBoard"] !== undefined ? _data["roomAndBoard"] : <any>null;
            this.roomAndBoardAffectedByInjury = _data["roomAndBoardAffectedByInjury"] !== undefined ? _data["roomAndBoardAffectedByInjury"] : <any>null;
            this.shiftDifferentialsPremiums = _data["shiftDifferentialsPremiums"] !== undefined ? _data["shiftDifferentialsPremiums"] : <any>null;
            this.tips = _data["tips"] !== undefined ? _data["tips"] : <any>null;
            this.tipsAverageAmount = _data["tipsAverageAmount"] !== undefined ? _data["tipsAverageAmount"] : <any>null;
            this.tipsPeriod = _data["tipsPeriod"] !== undefined ? _data["tipsPeriod"] : <any>null;
            this.other = _data["other"] !== undefined ? _data["other"] : <any>null;
            this.describeOther = _data["describeOther"] !== undefined ? _data["describeOther"] : <any>null;
            this.totalEarnings12WeeksPriorToInjury = _data["totalEarnings12WeeksPriorToInjury"] !== undefined ? _data["totalEarnings12WeeksPriorToInjury"] : <any>null;
        }
    }

    static fromJS(data: any): AdditionalCompenstations {
        data = typeof data === 'object' ? data : {};
        let result = new AdditionalCompenstations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bonuses"] = this.bonuses !== undefined ? this.bonuses : <any>null;
        data["holidays"] = this.holidays !== undefined ? this.holidays : <any>null;
        data["holidayPayPercentage"] = this.holidayPayPercentage !== undefined ? this.holidayPayPercentage : <any>null;
        data["livingOutAllowance"] = this.livingOutAllowance !== undefined ? this.livingOutAllowance : <any>null;
        data["overtime"] = this.overtime !== undefined ? this.overtime : <any>null;
        data["overtimeHours"] = this.overtimeHours !== undefined ? this.overtimeHours : <any>null;
        data["overtimePeriod"] = this.overtimePeriod !== undefined ? this.overtimePeriod : <any>null;
        data["overtimeRegularDays"] = this.overtimeRegularDays ? this.overtimeRegularDays.toJSON() : <any>null;
        data["roomAndBoard"] = this.roomAndBoard !== undefined ? this.roomAndBoard : <any>null;
        data["roomAndBoardAffectedByInjury"] = this.roomAndBoardAffectedByInjury !== undefined ? this.roomAndBoardAffectedByInjury : <any>null;
        data["shiftDifferentialsPremiums"] = this.shiftDifferentialsPremiums !== undefined ? this.shiftDifferentialsPremiums : <any>null;
        data["tips"] = this.tips !== undefined ? this.tips : <any>null;
        data["tipsAverageAmount"] = this.tipsAverageAmount !== undefined ? this.tipsAverageAmount : <any>null;
        data["tipsPeriod"] = this.tipsPeriod !== undefined ? this.tipsPeriod : <any>null;
        data["other"] = this.other !== undefined ? this.other : <any>null;
        data["describeOther"] = this.describeOther !== undefined ? this.describeOther : <any>null;
        data["totalEarnings12WeeksPriorToInjury"] = this.totalEarnings12WeeksPriorToInjury !== undefined ? this.totalEarnings12WeeksPriorToInjury : <any>null;
        return data;
    }
}

export interface IAdditionalCompenstations {
    bonuses?: boolean | null;
    holidays?: boolean | null;
    holidayPayPercentage?: number | null;
    livingOutAllowance?: boolean | null;
    overtime?: boolean | null;
    overtimeHours?: number | null;
    overtimePeriod?: Period;
    overtimeRegularDays?: DaySelection;
    roomAndBoard?: boolean | null;
    roomAndBoardAffectedByInjury?: boolean | null;
    shiftDifferentialsPremiums?: boolean | null;
    tips?: boolean | null;
    tipsAverageAmount?: number | null;
    tipsPeriod?: Period;
    other?: boolean | null;
    describeOther?: string | null;
    totalEarnings12WeeksPriorToInjury?: number | null;
}

export class AdditionalInformation implements IAdditionalInformation {
    label?: string | null;
    content?: string | null;

    constructor(data?: IAdditionalInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"] !== undefined ? _data["label"] : <any>null;
            this.content = _data["content"] !== undefined ? _data["content"] : <any>null;
        }
    }

    static fromJS(data: any): AdditionalInformation {
        data = typeof data === 'object' ? data : {};
        let result = new AdditionalInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label !== undefined ? this.label : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        return data;
    }
}

export interface IAdditionalInformation {
    label?: string | null;
    content?: string | null;
}

export class Address implements IAddress {
    addressLine1?: string | null;
    addressLine2?: string | null;
    city?: string | null;
    province?: string | null;
    country?: string | null;
    postalCode?: string | null;
    addressExtra?: string | null;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.addressLine1 = _data["addressLine1"] !== undefined ? _data["addressLine1"] : <any>null;
            this.addressLine2 = _data["addressLine2"] !== undefined ? _data["addressLine2"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.province = _data["province"] !== undefined ? _data["province"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.postalCode = _data["postalCode"] !== undefined ? _data["postalCode"] : <any>null;
            this.addressExtra = _data["addressExtra"] !== undefined ? _data["addressExtra"] : <any>null;
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["addressLine1"] = this.addressLine1 !== undefined ? this.addressLine1 : <any>null;
        data["addressLine2"] = this.addressLine2 !== undefined ? this.addressLine2 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["province"] = this.province !== undefined ? this.province : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["addressExtra"] = this.addressExtra !== undefined ? this.addressExtra : <any>null;
        return data;
    }
}

export interface IAddress {
    addressLine1?: string | null;
    addressLine2?: string | null;
    city?: string | null;
    province?: string | null;
    country?: string | null;
    postalCode?: string | null;
    addressExtra?: string | null;
}

export type AttachmentType = "Permanent" | "Temporary";

export class Authorization69W1 implements IAuthorization69W1 {
    authorizedToAccessInjuryInformation?: boolean | null;
    workerSignature?: string | null;

    constructor(data?: IAuthorization69W1) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.authorizedToAccessInjuryInformation = _data["authorizedToAccessInjuryInformation"] !== undefined ? _data["authorizedToAccessInjuryInformation"] : <any>null;
            this.workerSignature = _data["workerSignature"] !== undefined ? _data["workerSignature"] : <any>null;
        }
    }

    static fromJS(data: any): Authorization69W1 {
        data = typeof data === 'object' ? data : {};
        let result = new Authorization69W1();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authorizedToAccessInjuryInformation"] = this.authorizedToAccessInjuryInformation !== undefined ? this.authorizedToAccessInjuryInformation : <any>null;
        data["workerSignature"] = this.workerSignature !== undefined ? this.workerSignature : <any>null;
        return data;
    }
}

export interface IAuthorization69W1 {
    authorizedToAccessInjuryInformation?: boolean | null;
    workerSignature?: string | null;
}

export class BodyPart implements IBodyPart {
    isChecked?: boolean;
    subParts?: { [key: string]: SubBodyPart; } | null;

    constructor(data?: IBodyPart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isChecked = _data["isChecked"] !== undefined ? _data["isChecked"] : <any>null;
            if (_data["subParts"]) {
                this.subParts = {} as any;
                for (let key in _data["subParts"]) {
                    if (_data["subParts"].hasOwnProperty(key))
                        (<any>this.subParts)![key] = _data["subParts"][key] ? SubBodyPart.fromJS(_data["subParts"][key]) : new SubBodyPart();
                }
            }
            else {
                this.subParts = <any>null;
            }
        }
    }

    static fromJS(data: any): BodyPart {
        data = typeof data === 'object' ? data : {};
        let result = new BodyPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isChecked"] = this.isChecked !== undefined ? this.isChecked : <any>null;
        if (this.subParts) {
            data["subParts"] = {};
            for (let key in this.subParts) {
                if (this.subParts.hasOwnProperty(key))
                    (<any>data["subParts"])[key] = this.subParts[key] ? this.subParts[key].toJSON() : <any>null;
            }
        }
        return data;
    }
}

export interface IBodyPart {
    isChecked?: boolean;
    subParts?: { [key: string]: SubBodyPart; } | null;
}

export class ContactInformation implements IContactInformation {
    address?: Address;
    phone?: PhoneNumbers;
    email?: string | null;

    constructor(data?: IContactInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>null;
            this.phone = _data["phone"] ? PhoneNumbers.fromJS(_data["phone"]) : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
        }
    }

    static fromJS(data: any): ContactInformation {
        data = typeof data === 'object' ? data : {};
        let result = new ContactInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["address"] = this.address ? this.address.toJSON() : <any>null;
        data["phone"] = this.phone ? this.phone.toJSON() : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        return data;
    }
}

export interface IContactInformation {
    address?: Address;
    phone?: PhoneNumbers;
    email?: string | null;
}

export class DateOfBirth implements IDateOfBirth {
    yearOfBirth?: number | null;
    monthOfBirth?: number | null;
    dayOfBirth?: number | null;

    constructor(data?: IDateOfBirth) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.yearOfBirth = _data["yearOfBirth"] !== undefined ? _data["yearOfBirth"] : <any>null;
            this.monthOfBirth = _data["monthOfBirth"] !== undefined ? _data["monthOfBirth"] : <any>null;
            this.dayOfBirth = _data["dayOfBirth"] !== undefined ? _data["dayOfBirth"] : <any>null;
        }
    }

    static fromJS(data: any): DateOfBirth {
        data = typeof data === 'object' ? data : {};
        let result = new DateOfBirth();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["yearOfBirth"] = this.yearOfBirth !== undefined ? this.yearOfBirth : <any>null;
        data["monthOfBirth"] = this.monthOfBirth !== undefined ? this.monthOfBirth : <any>null;
        data["dayOfBirth"] = this.dayOfBirth !== undefined ? this.dayOfBirth : <any>null;
        return data;
    }
}

export interface IDateOfBirth {
    yearOfBirth?: number | null;
    monthOfBirth?: number | null;
    dayOfBirth?: number | null;
}

export class DaySelection implements IDaySelection {
    monday?: boolean | null;
    tuesday?: boolean | null;
    wednesday?: boolean | null;
    thursday?: boolean | null;
    friday?: boolean | null;
    saturday?: boolean | null;
    sunday?: boolean | null;

    constructor(data?: IDaySelection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.monday = _data["monday"] !== undefined ? _data["monday"] : <any>null;
            this.tuesday = _data["tuesday"] !== undefined ? _data["tuesday"] : <any>null;
            this.wednesday = _data["wednesday"] !== undefined ? _data["wednesday"] : <any>null;
            this.thursday = _data["thursday"] !== undefined ? _data["thursday"] : <any>null;
            this.friday = _data["friday"] !== undefined ? _data["friday"] : <any>null;
            this.saturday = _data["saturday"] !== undefined ? _data["saturday"] : <any>null;
            this.sunday = _data["sunday"] !== undefined ? _data["sunday"] : <any>null;
        }
    }

    static fromJS(data: any): DaySelection {
        data = typeof data === 'object' ? data : {};
        let result = new DaySelection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["monday"] = this.monday !== undefined ? this.monday : <any>null;
        data["tuesday"] = this.tuesday !== undefined ? this.tuesday : <any>null;
        data["wednesday"] = this.wednesday !== undefined ? this.wednesday : <any>null;
        data["thursday"] = this.thursday !== undefined ? this.thursday : <any>null;
        data["friday"] = this.friday !== undefined ? this.friday : <any>null;
        data["saturday"] = this.saturday !== undefined ? this.saturday : <any>null;
        data["sunday"] = this.sunday !== undefined ? this.sunday : <any>null;
        return data;
    }
}

export interface IDaySelection {
    monday?: boolean | null;
    tuesday?: boolean | null;
    wednesday?: boolean | null;
    thursday?: boolean | null;
    friday?: boolean | null;
    saturday?: boolean | null;
    sunday?: boolean | null;
}

export type DaysOnOffRotation = "LessThanSix" | "SixOrMore";

export class Demographics implements IDemographics {
    customerCareNumber?: number;
    sexAtBirth?: string | null;
    gender?: string | null;
    pronouns?: string | null;
    indigenousInd?: string | null;
    associationNation?: string | null;
    ancestry?: string | null;

    constructor(data?: IDemographics) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerCareNumber = _data["customerCareNumber"] !== undefined ? _data["customerCareNumber"] : <any>null;
            this.sexAtBirth = _data["sexAtBirth"] !== undefined ? _data["sexAtBirth"] : <any>null;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : <any>null;
            this.pronouns = _data["pronouns"] !== undefined ? _data["pronouns"] : <any>null;
            this.indigenousInd = _data["indigenousInd"] !== undefined ? _data["indigenousInd"] : <any>null;
            this.associationNation = _data["associationNation"] !== undefined ? _data["associationNation"] : <any>null;
            this.ancestry = _data["ancestry"] !== undefined ? _data["ancestry"] : <any>null;
        }
    }

    static fromJS(data: any): Demographics {
        data = typeof data === 'object' ? data : {};
        let result = new Demographics();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerCareNumber"] = this.customerCareNumber !== undefined ? this.customerCareNumber : <any>null;
        data["sexAtBirth"] = this.sexAtBirth !== undefined ? this.sexAtBirth : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["pronouns"] = this.pronouns !== undefined ? this.pronouns : <any>null;
        data["indigenousInd"] = this.indigenousInd !== undefined ? this.indigenousInd : <any>null;
        data["associationNation"] = this.associationNation !== undefined ? this.associationNation : <any>null;
        data["ancestry"] = this.ancestry !== undefined ? this.ancestry : <any>null;
        return data;
    }
}

export interface IDemographics {
    customerCareNumber?: number;
    sexAtBirth?: string | null;
    gender?: string | null;
    pronouns?: string | null;
    indigenousInd?: string | null;
    associationNation?: string | null;
    ancestry?: string | null;
}

export type DominantHandSide = "Left" | "Right" | "Ambidextrous";

export class Earnings implements IEarnings {
    maintainedFullSalary?: YesNoNotSure;
    maintainedFullSalaryLength?: MaintainedFullSalaryLength;
    injuryTimeReceivingBaseSalary?: YesNoNotSure;
    injuryTimeBaseSalaryAmount?: number | null;
    injuryTimeBaseSalaryPeriod?: Period;
    additionalCompenstations?: AdditionalCompenstations;

    constructor(data?: IEarnings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maintainedFullSalary = _data["maintainedFullSalary"] !== undefined ? _data["maintainedFullSalary"] : <any>null;
            this.maintainedFullSalaryLength = _data["maintainedFullSalaryLength"] !== undefined ? _data["maintainedFullSalaryLength"] : <any>null;
            this.injuryTimeReceivingBaseSalary = _data["injuryTimeReceivingBaseSalary"] !== undefined ? _data["injuryTimeReceivingBaseSalary"] : <any>null;
            this.injuryTimeBaseSalaryAmount = _data["injuryTimeBaseSalaryAmount"] !== undefined ? _data["injuryTimeBaseSalaryAmount"] : <any>null;
            this.injuryTimeBaseSalaryPeriod = _data["injuryTimeBaseSalaryPeriod"] !== undefined ? _data["injuryTimeBaseSalaryPeriod"] : <any>null;
            this.additionalCompenstations = _data["additionalCompenstations"] ? AdditionalCompenstations.fromJS(_data["additionalCompenstations"]) : <any>null;
        }
    }

    static fromJS(data: any): Earnings {
        data = typeof data === 'object' ? data : {};
        let result = new Earnings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maintainedFullSalary"] = this.maintainedFullSalary !== undefined ? this.maintainedFullSalary : <any>null;
        data["maintainedFullSalaryLength"] = this.maintainedFullSalaryLength !== undefined ? this.maintainedFullSalaryLength : <any>null;
        data["injuryTimeReceivingBaseSalary"] = this.injuryTimeReceivingBaseSalary !== undefined ? this.injuryTimeReceivingBaseSalary : <any>null;
        data["injuryTimeBaseSalaryAmount"] = this.injuryTimeBaseSalaryAmount !== undefined ? this.injuryTimeBaseSalaryAmount : <any>null;
        data["injuryTimeBaseSalaryPeriod"] = this.injuryTimeBaseSalaryPeriod !== undefined ? this.injuryTimeBaseSalaryPeriod : <any>null;
        data["additionalCompenstations"] = this.additionalCompenstations ? this.additionalCompenstations.toJSON() : <any>null;
        return data;
    }
}

export interface IEarnings {
    maintainedFullSalary?: YesNoNotSure;
    maintainedFullSalaryLength?: MaintainedFullSalaryLength;
    injuryTimeReceivingBaseSalary?: YesNoNotSure;
    injuryTimeBaseSalaryAmount?: number | null;
    injuryTimeBaseSalaryPeriod?: Period;
    additionalCompenstations?: AdditionalCompenstations;
}

export class EmailConsent implements IEmailConsent {
    consentIsGiven?: boolean | null;
    workerRepresentativiesAuthorized?: boolean | null;
    employerAndRepresentativiesAuthorized?: boolean | null;
    healthcareAndServiceProvidersAuthorized?: boolean | null;
    representativeInfo?: RepresentativeInformation;

    constructor(data?: IEmailConsent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.consentIsGiven = _data["consentIsGiven"] !== undefined ? _data["consentIsGiven"] : <any>null;
            this.workerRepresentativiesAuthorized = _data["workerRepresentativiesAuthorized"] !== undefined ? _data["workerRepresentativiesAuthorized"] : <any>null;
            this.employerAndRepresentativiesAuthorized = _data["employerAndRepresentativiesAuthorized"] !== undefined ? _data["employerAndRepresentativiesAuthorized"] : <any>null;
            this.healthcareAndServiceProvidersAuthorized = _data["healthcareAndServiceProvidersAuthorized"] !== undefined ? _data["healthcareAndServiceProvidersAuthorized"] : <any>null;
            this.representativeInfo = _data["representativeInfo"] ? RepresentativeInformation.fromJS(_data["representativeInfo"]) : <any>null;
        }
    }

    static fromJS(data: any): EmailConsent {
        data = typeof data === 'object' ? data : {};
        let result = new EmailConsent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["consentIsGiven"] = this.consentIsGiven !== undefined ? this.consentIsGiven : <any>null;
        data["workerRepresentativiesAuthorized"] = this.workerRepresentativiesAuthorized !== undefined ? this.workerRepresentativiesAuthorized : <any>null;
        data["employerAndRepresentativiesAuthorized"] = this.employerAndRepresentativiesAuthorized !== undefined ? this.employerAndRepresentativiesAuthorized : <any>null;
        data["healthcareAndServiceProvidersAuthorized"] = this.healthcareAndServiceProvidersAuthorized !== undefined ? this.healthcareAndServiceProvidersAuthorized : <any>null;
        data["representativeInfo"] = this.representativeInfo ? this.representativeInfo.toJSON() : <any>null;
        return data;
    }
}

export interface IEmailConsent {
    consentIsGiven?: boolean | null;
    workerRepresentativiesAuthorized?: boolean | null;
    employerAndRepresentativiesAuthorized?: boolean | null;
    healthcareAndServiceProvidersAuthorized?: boolean | null;
    representativeInfo?: RepresentativeInformation;
}

export class EmployerInformation implements IEmployerInformation {
    jobTitle?: string | null;
    name?: string | null;
    contactName?: string | null;
    otherEmployer?: boolean | null;
    phoneNumber?: string | null;
    extension?: string | null;
    employerAddress?: Address;

    constructor(data?: IEmployerInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.jobTitle = _data["jobTitle"] !== undefined ? _data["jobTitle"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.contactName = _data["contactName"] !== undefined ? _data["contactName"] : <any>null;
            this.otherEmployer = _data["otherEmployer"] !== undefined ? _data["otherEmployer"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.extension = _data["extension"] !== undefined ? _data["extension"] : <any>null;
            this.employerAddress = _data["employerAddress"] ? Address.fromJS(_data["employerAddress"]) : <any>null;
        }
    }

    static fromJS(data: any): EmployerInformation {
        data = typeof data === 'object' ? data : {};
        let result = new EmployerInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jobTitle"] = this.jobTitle !== undefined ? this.jobTitle : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["contactName"] = this.contactName !== undefined ? this.contactName : <any>null;
        data["otherEmployer"] = this.otherEmployer !== undefined ? this.otherEmployer : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["extension"] = this.extension !== undefined ? this.extension : <any>null;
        data["employerAddress"] = this.employerAddress ? this.employerAddress.toJSON() : <any>null;
        return data;
    }
}

export interface IEmployerInformation {
    jobTitle?: string | null;
    name?: string | null;
    contactName?: string | null;
    otherEmployer?: boolean | null;
    phoneNumber?: string | null;
    extension?: string | null;
    employerAddress?: Address;
}

export class EmploymentAndEmployerInfo implements IEmploymentAndEmployerInfo {
    additionalInformation?: AdditionalInformation;
    employmentDetails?: EmploymentDetails;
    employerInformation?: EmployerInformation;
    reportingToEmployer?: ReportingToEmployer;
    shiftInformation?: ShiftInformation;
    earnings?: Earnings;
    returnToWork?: ReturnToWork;

    constructor(data?: IEmploymentAndEmployerInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.additionalInformation = _data["additionalInformation"] ? AdditionalInformation.fromJS(_data["additionalInformation"]) : <any>null;
            this.employmentDetails = _data["employmentDetails"] ? EmploymentDetails.fromJS(_data["employmentDetails"]) : <any>null;
            this.employerInformation = _data["employerInformation"] ? EmployerInformation.fromJS(_data["employerInformation"]) : <any>null;
            this.reportingToEmployer = _data["reportingToEmployer"] ? ReportingToEmployer.fromJS(_data["reportingToEmployer"]) : <any>null;
            this.shiftInformation = _data["shiftInformation"] ? ShiftInformation.fromJS(_data["shiftInformation"]) : <any>null;
            this.earnings = _data["earnings"] ? Earnings.fromJS(_data["earnings"]) : <any>null;
            this.returnToWork = _data["returnToWork"] ? ReturnToWork.fromJS(_data["returnToWork"]) : <any>null;
        }
    }

    static fromJS(data: any): EmploymentAndEmployerInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EmploymentAndEmployerInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["additionalInformation"] = this.additionalInformation ? this.additionalInformation.toJSON() : <any>null;
        data["employmentDetails"] = this.employmentDetails ? this.employmentDetails.toJSON() : <any>null;
        data["employerInformation"] = this.employerInformation ? this.employerInformation.toJSON() : <any>null;
        data["reportingToEmployer"] = this.reportingToEmployer ? this.reportingToEmployer.toJSON() : <any>null;
        data["shiftInformation"] = this.shiftInformation ? this.shiftInformation.toJSON() : <any>null;
        data["earnings"] = this.earnings ? this.earnings.toJSON() : <any>null;
        data["returnToWork"] = this.returnToWork ? this.returnToWork.toJSON() : <any>null;
        return data;
    }
}

export interface IEmploymentAndEmployerInfo {
    additionalInformation?: AdditionalInformation;
    employmentDetails?: EmploymentDetails;
    employerInformation?: EmployerInformation;
    reportingToEmployer?: ReportingToEmployer;
    shiftInformation?: ShiftInformation;
    earnings?: Earnings;
    returnToWork?: ReturnToWork;
}

export class EmploymentDetails implements IEmploymentDetails {
    employmentType?: EmploymentType;
    educationalInstitutionAndProgram?: string | null;
    havePurchasedPersonalOptionalProtection?: boolean | null;
    purchasedPersonalOptionalProtectionAccountNumber?: string | null;
    accountantName?: string | null;
    accountantPhoneNumber?: string | null;
    socialInsuranceNumber?: string | null;
    currentlyAttendingSchool?: boolean | null;
    fieldOfStudy?: string | null;
    schoolName?: string | null;
    completedRecentProgramOfStudy?: boolean | null;
    completedFieldOfStudy?: string | null;
    completedSchoolName?: string | null;
    apprenticeshipProgramName?: string | null;
    apprenticeshipCertificationNumber?: string | null;
    attachmentType?: AttachmentType;
    employmentStatus?: EmploymentStatus;
    workedOver12Months?: boolean | null;
    whenDidJobBegin?: string | null;
    whenDidJobBeginIsApproximate?: boolean | null;
    expectedJobEndDate?: string | null;
    expectedJobEndDateIsApproximate?: boolean | null;
    temporaryJobAdditionalInformation?: string | null;

    constructor(data?: IEmploymentDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employmentType = _data["employmentType"] !== undefined ? _data["employmentType"] : <any>null;
            this.educationalInstitutionAndProgram = _data["educationalInstitutionAndProgram"] !== undefined ? _data["educationalInstitutionAndProgram"] : <any>null;
            this.havePurchasedPersonalOptionalProtection = _data["havePurchasedPersonalOptionalProtection"] !== undefined ? _data["havePurchasedPersonalOptionalProtection"] : <any>null;
            this.purchasedPersonalOptionalProtectionAccountNumber = _data["purchasedPersonalOptionalProtectionAccountNumber"] !== undefined ? _data["purchasedPersonalOptionalProtectionAccountNumber"] : <any>null;
            this.accountantName = _data["accountantName"] !== undefined ? _data["accountantName"] : <any>null;
            this.accountantPhoneNumber = _data["accountantPhoneNumber"] !== undefined ? _data["accountantPhoneNumber"] : <any>null;
            this.socialInsuranceNumber = _data["socialInsuranceNumber"] !== undefined ? _data["socialInsuranceNumber"] : <any>null;
            this.currentlyAttendingSchool = _data["currentlyAttendingSchool"] !== undefined ? _data["currentlyAttendingSchool"] : <any>null;
            this.fieldOfStudy = _data["fieldOfStudy"] !== undefined ? _data["fieldOfStudy"] : <any>null;
            this.schoolName = _data["schoolName"] !== undefined ? _data["schoolName"] : <any>null;
            this.completedRecentProgramOfStudy = _data["completedRecentProgramOfStudy"] !== undefined ? _data["completedRecentProgramOfStudy"] : <any>null;
            this.completedFieldOfStudy = _data["completedFieldOfStudy"] !== undefined ? _data["completedFieldOfStudy"] : <any>null;
            this.completedSchoolName = _data["completedSchoolName"] !== undefined ? _data["completedSchoolName"] : <any>null;
            this.apprenticeshipProgramName = _data["apprenticeshipProgramName"] !== undefined ? _data["apprenticeshipProgramName"] : <any>null;
            this.apprenticeshipCertificationNumber = _data["apprenticeshipCertificationNumber"] !== undefined ? _data["apprenticeshipCertificationNumber"] : <any>null;
            this.attachmentType = _data["attachmentType"] !== undefined ? _data["attachmentType"] : <any>null;
            this.employmentStatus = _data["employmentStatus"] !== undefined ? _data["employmentStatus"] : <any>null;
            this.workedOver12Months = _data["workedOver12Months"] !== undefined ? _data["workedOver12Months"] : <any>null;
            this.whenDidJobBegin = _data["whenDidJobBegin"] !== undefined ? _data["whenDidJobBegin"] : <any>null;
            this.whenDidJobBeginIsApproximate = _data["whenDidJobBeginIsApproximate"] !== undefined ? _data["whenDidJobBeginIsApproximate"] : <any>null;
            this.expectedJobEndDate = _data["expectedJobEndDate"] !== undefined ? _data["expectedJobEndDate"] : <any>null;
            this.expectedJobEndDateIsApproximate = _data["expectedJobEndDateIsApproximate"] !== undefined ? _data["expectedJobEndDateIsApproximate"] : <any>null;
            this.temporaryJobAdditionalInformation = _data["temporaryJobAdditionalInformation"] !== undefined ? _data["temporaryJobAdditionalInformation"] : <any>null;
        }
    }

    static fromJS(data: any): EmploymentDetails {
        data = typeof data === 'object' ? data : {};
        let result = new EmploymentDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employmentType"] = this.employmentType !== undefined ? this.employmentType : <any>null;
        data["educationalInstitutionAndProgram"] = this.educationalInstitutionAndProgram !== undefined ? this.educationalInstitutionAndProgram : <any>null;
        data["havePurchasedPersonalOptionalProtection"] = this.havePurchasedPersonalOptionalProtection !== undefined ? this.havePurchasedPersonalOptionalProtection : <any>null;
        data["purchasedPersonalOptionalProtectionAccountNumber"] = this.purchasedPersonalOptionalProtectionAccountNumber !== undefined ? this.purchasedPersonalOptionalProtectionAccountNumber : <any>null;
        data["accountantName"] = this.accountantName !== undefined ? this.accountantName : <any>null;
        data["accountantPhoneNumber"] = this.accountantPhoneNumber !== undefined ? this.accountantPhoneNumber : <any>null;
        data["socialInsuranceNumber"] = this.socialInsuranceNumber !== undefined ? this.socialInsuranceNumber : <any>null;
        data["currentlyAttendingSchool"] = this.currentlyAttendingSchool !== undefined ? this.currentlyAttendingSchool : <any>null;
        data["fieldOfStudy"] = this.fieldOfStudy !== undefined ? this.fieldOfStudy : <any>null;
        data["schoolName"] = this.schoolName !== undefined ? this.schoolName : <any>null;
        data["completedRecentProgramOfStudy"] = this.completedRecentProgramOfStudy !== undefined ? this.completedRecentProgramOfStudy : <any>null;
        data["completedFieldOfStudy"] = this.completedFieldOfStudy !== undefined ? this.completedFieldOfStudy : <any>null;
        data["completedSchoolName"] = this.completedSchoolName !== undefined ? this.completedSchoolName : <any>null;
        data["apprenticeshipProgramName"] = this.apprenticeshipProgramName !== undefined ? this.apprenticeshipProgramName : <any>null;
        data["apprenticeshipCertificationNumber"] = this.apprenticeshipCertificationNumber !== undefined ? this.apprenticeshipCertificationNumber : <any>null;
        data["attachmentType"] = this.attachmentType !== undefined ? this.attachmentType : <any>null;
        data["employmentStatus"] = this.employmentStatus !== undefined ? this.employmentStatus : <any>null;
        data["workedOver12Months"] = this.workedOver12Months !== undefined ? this.workedOver12Months : <any>null;
        data["whenDidJobBegin"] = this.whenDidJobBegin !== undefined ? this.whenDidJobBegin : <any>null;
        data["whenDidJobBeginIsApproximate"] = this.whenDidJobBeginIsApproximate !== undefined ? this.whenDidJobBeginIsApproximate : <any>null;
        data["expectedJobEndDate"] = this.expectedJobEndDate !== undefined ? this.expectedJobEndDate : <any>null;
        data["expectedJobEndDateIsApproximate"] = this.expectedJobEndDateIsApproximate !== undefined ? this.expectedJobEndDateIsApproximate : <any>null;
        data["temporaryJobAdditionalInformation"] = this.temporaryJobAdditionalInformation !== undefined ? this.temporaryJobAdditionalInformation : <any>null;
        return data;
    }
}

export interface IEmploymentDetails {
    employmentType?: EmploymentType;
    educationalInstitutionAndProgram?: string | null;
    havePurchasedPersonalOptionalProtection?: boolean | null;
    purchasedPersonalOptionalProtectionAccountNumber?: string | null;
    accountantName?: string | null;
    accountantPhoneNumber?: string | null;
    socialInsuranceNumber?: string | null;
    currentlyAttendingSchool?: boolean | null;
    fieldOfStudy?: string | null;
    schoolName?: string | null;
    completedRecentProgramOfStudy?: boolean | null;
    completedFieldOfStudy?: string | null;
    completedSchoolName?: string | null;
    apprenticeshipProgramName?: string | null;
    apprenticeshipCertificationNumber?: string | null;
    attachmentType?: AttachmentType;
    employmentStatus?: EmploymentStatus;
    workedOver12Months?: boolean | null;
    whenDidJobBegin?: string | null;
    whenDidJobBeginIsApproximate?: boolean | null;
    expectedJobEndDate?: string | null;
    expectedJobEndDateIsApproximate?: boolean | null;
    temporaryJobAdditionalInformation?: string | null;
}

export type EmploymentStatus = "FullTime" | "PartTime";

export type EmploymentType = "Employee" | "Proprietor" | "Incorporated" | "Spouse" | "Student" | "Volunteer" | "Apprenticeship";

export type EstimatedReturnToWork = "NextShift" | "LessThanTwoWeeks" | "TwoToFourWeeks" | "MoreThanMonth" | "Unsure";

export type HaveReturnedToWork = "Yes" | "No" | "NoJob";

export class HoursMinutes implements IHoursMinutes {
    hours?: number | null;
    minutes?: number | null;

    constructor(data?: IHoursMinutes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hours = _data["hours"] !== undefined ? _data["hours"] : <any>null;
            this.minutes = _data["minutes"] !== undefined ? _data["minutes"] : <any>null;
        }
    }

    static fromJS(data: any): HoursMinutes {
        data = typeof data === 'object' ? data : {};
        let result = new HoursMinutes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hours"] = this.hours !== undefined ? this.hours : <any>null;
        data["minutes"] = this.minutes !== undefined ? this.minutes : <any>null;
        return data;
    }
}

export interface IHoursMinutes {
    hours?: number | null;
    minutes?: number | null;
}

export class IncidentDetails implements IIncidentDetails {
    occurredInBc?: boolean | null;
    incidentLocation?: string | null;
    incidentLocationDetails?: string | null;
    occurredDuringNormalShift?: boolean | null;
    shiftAndTimeOfInjuryDetails?: string | null;
    activityAtTimeOfInjuryDetails?: string | null;
    ocurredWhilePerformingRegularDuties?: boolean | null;

    constructor(data?: IIncidentDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.occurredInBc = _data["occurredInBc"] !== undefined ? _data["occurredInBc"] : <any>null;
            this.incidentLocation = _data["incidentLocation"] !== undefined ? _data["incidentLocation"] : <any>null;
            this.incidentLocationDetails = _data["incidentLocationDetails"] !== undefined ? _data["incidentLocationDetails"] : <any>null;
            this.occurredDuringNormalShift = _data["occurredDuringNormalShift"] !== undefined ? _data["occurredDuringNormalShift"] : <any>null;
            this.shiftAndTimeOfInjuryDetails = _data["shiftAndTimeOfInjuryDetails"] !== undefined ? _data["shiftAndTimeOfInjuryDetails"] : <any>null;
            this.activityAtTimeOfInjuryDetails = _data["activityAtTimeOfInjuryDetails"] !== undefined ? _data["activityAtTimeOfInjuryDetails"] : <any>null;
            this.ocurredWhilePerformingRegularDuties = _data["ocurredWhilePerformingRegularDuties"] !== undefined ? _data["ocurredWhilePerformingRegularDuties"] : <any>null;
        }
    }

    static fromJS(data: any): IncidentDetails {
        data = typeof data === 'object' ? data : {};
        let result = new IncidentDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["occurredInBc"] = this.occurredInBc !== undefined ? this.occurredInBc : <any>null;
        data["incidentLocation"] = this.incidentLocation !== undefined ? this.incidentLocation : <any>null;
        data["incidentLocationDetails"] = this.incidentLocationDetails !== undefined ? this.incidentLocationDetails : <any>null;
        data["occurredDuringNormalShift"] = this.occurredDuringNormalShift !== undefined ? this.occurredDuringNormalShift : <any>null;
        data["shiftAndTimeOfInjuryDetails"] = this.shiftAndTimeOfInjuryDetails !== undefined ? this.shiftAndTimeOfInjuryDetails : <any>null;
        data["activityAtTimeOfInjuryDetails"] = this.activityAtTimeOfInjuryDetails !== undefined ? this.activityAtTimeOfInjuryDetails : <any>null;
        data["ocurredWhilePerformingRegularDuties"] = this.ocurredWhilePerformingRegularDuties !== undefined ? this.ocurredWhilePerformingRegularDuties : <any>null;
        return data;
    }
}

export interface IIncidentDetails {
    occurredInBc?: boolean | null;
    incidentLocation?: string | null;
    incidentLocationDetails?: string | null;
    occurredDuringNormalShift?: boolean | null;
    shiftAndTimeOfInjuryDetails?: string | null;
    activityAtTimeOfInjuryDetails?: string | null;
    ocurredWhilePerformingRegularDuties?: boolean | null;
}

export class IncidentOverview implements IIncidentOverview {
    howInjuryHappened?: string | null;
    contributingFactors?: { [key: string]: boolean; } | null;
    accidentInvolved?: AccidentInvolved;
    accidentInvolvedOther?: string | null;
    injuryDate?: string | null;
    injuryTime?: InjuryTime;
    isInjuryDateApproximate?: boolean | null;
    timelossIndicators?: TimelossIndicators;
    weightLifted?: WeightLifted;
    describeLifting?: string | null;
    injuryType?: string | null;
    anticipatedMissingTime?: string | null;
    missedTimeFromWork?: MissedTimeFromWork;
    injuryWasCatastrophic?: boolean | null;
    itemsDamaged?: InjuryItemsDamaged;
    reasonMissTimeFromWork?: string | null;

    constructor(data?: IIncidentOverview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.howInjuryHappened = _data["howInjuryHappened"] !== undefined ? _data["howInjuryHappened"] : <any>null;
            if (_data["contributingFactors"]) {
                this.contributingFactors = {} as any;
                for (let key in _data["contributingFactors"]) {
                    if (_data["contributingFactors"].hasOwnProperty(key))
                        (<any>this.contributingFactors)![key] = _data["contributingFactors"][key] !== undefined ? _data["contributingFactors"][key] : <any>null;
                }
            }
            else {
                this.contributingFactors = <any>null;
            }
            this.accidentInvolved = _data["accidentInvolved"] !== undefined ? _data["accidentInvolved"] : <any>null;
            this.accidentInvolvedOther = _data["accidentInvolvedOther"] !== undefined ? _data["accidentInvolvedOther"] : <any>null;
            this.injuryDate = _data["injuryDate"] !== undefined ? _data["injuryDate"] : <any>null;
            this.injuryTime = _data["injuryTime"] ? InjuryTime.fromJS(_data["injuryTime"]) : <any>null;
            this.isInjuryDateApproximate = _data["isInjuryDateApproximate"] !== undefined ? _data["isInjuryDateApproximate"] : <any>null;
            this.timelossIndicators = _data["timelossIndicators"] ? TimelossIndicators.fromJS(_data["timelossIndicators"]) : <any>null;
            this.weightLifted = _data["weightLifted"] !== undefined ? _data["weightLifted"] : <any>null;
            this.describeLifting = _data["describeLifting"] !== undefined ? _data["describeLifting"] : <any>null;
            this.injuryType = _data["injuryType"] !== undefined ? _data["injuryType"] : <any>null;
            this.anticipatedMissingTime = _data["anticipatedMissingTime"] !== undefined ? _data["anticipatedMissingTime"] : <any>null;
            this.missedTimeFromWork = _data["missedTimeFromWork"] ? MissedTimeFromWork.fromJS(_data["missedTimeFromWork"]) : <any>null;
            this.injuryWasCatastrophic = _data["injuryWasCatastrophic"] !== undefined ? _data["injuryWasCatastrophic"] : <any>null;
            this.itemsDamaged = _data["itemsDamaged"] ? InjuryItemsDamaged.fromJS(_data["itemsDamaged"]) : <any>null;
            this.reasonMissTimeFromWork = _data["reasonMissTimeFromWork"] !== undefined ? _data["reasonMissTimeFromWork"] : <any>null;
        }
    }

    static fromJS(data: any): IncidentOverview {
        data = typeof data === 'object' ? data : {};
        let result = new IncidentOverview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["howInjuryHappened"] = this.howInjuryHappened !== undefined ? this.howInjuryHappened : <any>null;
        if (this.contributingFactors) {
            data["contributingFactors"] = {};
            for (let key in this.contributingFactors) {
                if (this.contributingFactors.hasOwnProperty(key))
                    (<any>data["contributingFactors"])[key] = this.contributingFactors[key] !== undefined ? this.contributingFactors[key] : <any>null;
            }
        }
        data["accidentInvolved"] = this.accidentInvolved !== undefined ? this.accidentInvolved : <any>null;
        data["accidentInvolvedOther"] = this.accidentInvolvedOther !== undefined ? this.accidentInvolvedOther : <any>null;
        data["injuryDate"] = this.injuryDate !== undefined ? this.injuryDate : <any>null;
        data["injuryTime"] = this.injuryTime ? this.injuryTime.toJSON() : <any>null;
        data["isInjuryDateApproximate"] = this.isInjuryDateApproximate !== undefined ? this.isInjuryDateApproximate : <any>null;
        data["timelossIndicators"] = this.timelossIndicators ? this.timelossIndicators.toJSON() : <any>null;
        data["weightLifted"] = this.weightLifted !== undefined ? this.weightLifted : <any>null;
        data["describeLifting"] = this.describeLifting !== undefined ? this.describeLifting : <any>null;
        data["injuryType"] = this.injuryType !== undefined ? this.injuryType : <any>null;
        data["anticipatedMissingTime"] = this.anticipatedMissingTime !== undefined ? this.anticipatedMissingTime : <any>null;
        data["missedTimeFromWork"] = this.missedTimeFromWork ? this.missedTimeFromWork.toJSON() : <any>null;
        data["injuryWasCatastrophic"] = this.injuryWasCatastrophic !== undefined ? this.injuryWasCatastrophic : <any>null;
        data["itemsDamaged"] = this.itemsDamaged ? this.itemsDamaged.toJSON() : <any>null;
        data["reasonMissTimeFromWork"] = this.reasonMissTimeFromWork !== undefined ? this.reasonMissTimeFromWork : <any>null;
        return data;
    }
}

export interface IIncidentOverview {
    howInjuryHappened?: string | null;
    contributingFactors?: { [key: string]: boolean; } | null;
    accidentInvolved?: AccidentInvolved;
    accidentInvolvedOther?: string | null;
    injuryDate?: string | null;
    injuryTime?: InjuryTime;
    isInjuryDateApproximate?: boolean | null;
    timelossIndicators?: TimelossIndicators;
    weightLifted?: WeightLifted;
    describeLifting?: string | null;
    injuryType?: string | null;
    anticipatedMissingTime?: string | null;
    missedTimeFromWork?: MissedTimeFromWork;
    injuryWasCatastrophic?: boolean | null;
    itemsDamaged?: InjuryItemsDamaged;
    reasonMissTimeFromWork?: string | null;
}

export class InjuriesEffectOnWork implements IInjuriesEffectOnWork {
    haveNotMissedAnyTime?: boolean | null;
    haveMissedTimeOnTheDay?: boolean | null;
    haveMissedTimeAfterTheDay?: boolean | null;
    likelyToMissMoreWork?: boolean | null;
    dutiesAdjusted?: boolean | null;
    notSureMyInjuryWillAffectWork?: boolean | null;

    constructor(data?: IInjuriesEffectOnWork) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.haveNotMissedAnyTime = _data["haveNotMissedAnyTime"] !== undefined ? _data["haveNotMissedAnyTime"] : <any>null;
            this.haveMissedTimeOnTheDay = _data["haveMissedTimeOnTheDay"] !== undefined ? _data["haveMissedTimeOnTheDay"] : <any>null;
            this.haveMissedTimeAfterTheDay = _data["haveMissedTimeAfterTheDay"] !== undefined ? _data["haveMissedTimeAfterTheDay"] : <any>null;
            this.likelyToMissMoreWork = _data["likelyToMissMoreWork"] !== undefined ? _data["likelyToMissMoreWork"] : <any>null;
            this.dutiesAdjusted = _data["dutiesAdjusted"] !== undefined ? _data["dutiesAdjusted"] : <any>null;
            this.notSureMyInjuryWillAffectWork = _data["notSureMyInjuryWillAffectWork"] !== undefined ? _data["notSureMyInjuryWillAffectWork"] : <any>null;
        }
    }

    static fromJS(data: any): InjuriesEffectOnWork {
        data = typeof data === 'object' ? data : {};
        let result = new InjuriesEffectOnWork();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["haveNotMissedAnyTime"] = this.haveNotMissedAnyTime !== undefined ? this.haveNotMissedAnyTime : <any>null;
        data["haveMissedTimeOnTheDay"] = this.haveMissedTimeOnTheDay !== undefined ? this.haveMissedTimeOnTheDay : <any>null;
        data["haveMissedTimeAfterTheDay"] = this.haveMissedTimeAfterTheDay !== undefined ? this.haveMissedTimeAfterTheDay : <any>null;
        data["likelyToMissMoreWork"] = this.likelyToMissMoreWork !== undefined ? this.likelyToMissMoreWork : <any>null;
        data["dutiesAdjusted"] = this.dutiesAdjusted !== undefined ? this.dutiesAdjusted : <any>null;
        data["notSureMyInjuryWillAffectWork"] = this.notSureMyInjuryWillAffectWork !== undefined ? this.notSureMyInjuryWillAffectWork : <any>null;
        return data;
    }
}

export interface IInjuriesEffectOnWork {
    haveNotMissedAnyTime?: boolean | null;
    haveMissedTimeOnTheDay?: boolean | null;
    haveMissedTimeAfterTheDay?: boolean | null;
    likelyToMissMoreWork?: boolean | null;
    dutiesAdjusted?: boolean | null;
    notSureMyInjuryWillAffectWork?: boolean | null;
}

export class InjuryAndIncident implements IInjuryAndIncident {
    additionalInformation?: AdditionalInformation;
    incidentOverview?: IncidentOverview;
    injuryDetails?: InjuryDetails;
    incidentDetails?: IncidentDetails;

    constructor(data?: IInjuryAndIncident) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.additionalInformation = _data["additionalInformation"] ? AdditionalInformation.fromJS(_data["additionalInformation"]) : <any>null;
            this.incidentOverview = _data["incidentOverview"] ? IncidentOverview.fromJS(_data["incidentOverview"]) : <any>null;
            this.injuryDetails = _data["injuryDetails"] ? InjuryDetails.fromJS(_data["injuryDetails"]) : <any>null;
            this.incidentDetails = _data["incidentDetails"] ? IncidentDetails.fromJS(_data["incidentDetails"]) : <any>null;
        }
    }

    static fromJS(data: any): InjuryAndIncident {
        data = typeof data === 'object' ? data : {};
        let result = new InjuryAndIncident();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["additionalInformation"] = this.additionalInformation ? this.additionalInformation.toJSON() : <any>null;
        data["incidentOverview"] = this.incidentOverview ? this.incidentOverview.toJSON() : <any>null;
        data["injuryDetails"] = this.injuryDetails ? this.injuryDetails.toJSON() : <any>null;
        data["incidentDetails"] = this.incidentDetails ? this.incidentDetails.toJSON() : <any>null;
        return data;
    }
}

export interface IInjuryAndIncident {
    additionalInformation?: AdditionalInformation;
    incidentOverview?: IncidentOverview;
    injuryDetails?: InjuryDetails;
    incidentDetails?: IncidentDetails;
}

export class InjuryDetails implements IInjuryDetails {
    bodyParts?: { [key: string]: BodyPart; } | null;
    haveHadPriorProblemsWithInjuredAreas?: boolean | null;
    haveFullyRecoveredFromPriorInjury?: boolean | null;
    haveExistingClaimNumber?: boolean | null;
    additionalInformationPreviousInjury?: string | null;
    impactToHead?: boolean | null;
    diagnosedConcussion?: boolean | null;
    dominantHand?: DominantHandSide;

    constructor(data?: IInjuryDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["bodyParts"]) {
                this.bodyParts = {} as any;
                for (let key in _data["bodyParts"]) {
                    if (_data["bodyParts"].hasOwnProperty(key))
                        (<any>this.bodyParts)![key] = _data["bodyParts"][key] ? BodyPart.fromJS(_data["bodyParts"][key]) : new BodyPart();
                }
            }
            else {
                this.bodyParts = <any>null;
            }
            this.haveHadPriorProblemsWithInjuredAreas = _data["haveHadPriorProblemsWithInjuredAreas"] !== undefined ? _data["haveHadPriorProblemsWithInjuredAreas"] : <any>null;
            this.haveFullyRecoveredFromPriorInjury = _data["haveFullyRecoveredFromPriorInjury"] !== undefined ? _data["haveFullyRecoveredFromPriorInjury"] : <any>null;
            this.haveExistingClaimNumber = _data["haveExistingClaimNumber"] !== undefined ? _data["haveExistingClaimNumber"] : <any>null;
            this.additionalInformationPreviousInjury = _data["additionalInformationPreviousInjury"] !== undefined ? _data["additionalInformationPreviousInjury"] : <any>null;
            this.impactToHead = _data["impactToHead"] !== undefined ? _data["impactToHead"] : <any>null;
            this.diagnosedConcussion = _data["diagnosedConcussion"] !== undefined ? _data["diagnosedConcussion"] : <any>null;
            this.dominantHand = _data["dominantHand"] !== undefined ? _data["dominantHand"] : <any>null;
        }
    }

    static fromJS(data: any): InjuryDetails {
        data = typeof data === 'object' ? data : {};
        let result = new InjuryDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.bodyParts) {
            data["bodyParts"] = {};
            for (let key in this.bodyParts) {
                if (this.bodyParts.hasOwnProperty(key))
                    (<any>data["bodyParts"])[key] = this.bodyParts[key] ? this.bodyParts[key].toJSON() : <any>null;
            }
        }
        data["haveHadPriorProblemsWithInjuredAreas"] = this.haveHadPriorProblemsWithInjuredAreas !== undefined ? this.haveHadPriorProblemsWithInjuredAreas : <any>null;
        data["haveFullyRecoveredFromPriorInjury"] = this.haveFullyRecoveredFromPriorInjury !== undefined ? this.haveFullyRecoveredFromPriorInjury : <any>null;
        data["haveExistingClaimNumber"] = this.haveExistingClaimNumber !== undefined ? this.haveExistingClaimNumber : <any>null;
        data["additionalInformationPreviousInjury"] = this.additionalInformationPreviousInjury !== undefined ? this.additionalInformationPreviousInjury : <any>null;
        data["impactToHead"] = this.impactToHead !== undefined ? this.impactToHead : <any>null;
        data["diagnosedConcussion"] = this.diagnosedConcussion !== undefined ? this.diagnosedConcussion : <any>null;
        data["dominantHand"] = this.dominantHand !== undefined ? this.dominantHand : <any>null;
        return data;
    }
}

export interface IInjuryDetails {
    bodyParts?: { [key: string]: BodyPart; } | null;
    haveHadPriorProblemsWithInjuredAreas?: boolean | null;
    haveFullyRecoveredFromPriorInjury?: boolean | null;
    haveExistingClaimNumber?: boolean | null;
    additionalInformationPreviousInjury?: string | null;
    impactToHead?: boolean | null;
    diagnosedConcussion?: boolean | null;
    dominantHand?: DominantHandSide;
}

export class InjuryItemsDamaged implements IInjuryItemsDamaged {
    hearingAid?: boolean | null;
    artificialLimb?: boolean | null;
    dentures?: boolean | null;
    eyeGlasses?: boolean | null;

    constructor(data?: IInjuryItemsDamaged) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hearingAid = _data["hearingAid"] !== undefined ? _data["hearingAid"] : <any>null;
            this.artificialLimb = _data["artificialLimb"] !== undefined ? _data["artificialLimb"] : <any>null;
            this.dentures = _data["dentures"] !== undefined ? _data["dentures"] : <any>null;
            this.eyeGlasses = _data["eyeGlasses"] !== undefined ? _data["eyeGlasses"] : <any>null;
        }
    }

    static fromJS(data: any): InjuryItemsDamaged {
        data = typeof data === 'object' ? data : {};
        let result = new InjuryItemsDamaged();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hearingAid"] = this.hearingAid !== undefined ? this.hearingAid : <any>null;
        data["artificialLimb"] = this.artificialLimb !== undefined ? this.artificialLimb : <any>null;
        data["dentures"] = this.dentures !== undefined ? this.dentures : <any>null;
        data["eyeGlasses"] = this.eyeGlasses !== undefined ? this.eyeGlasses : <any>null;
        return data;
    }
}

export interface IInjuryItemsDamaged {
    hearingAid?: boolean | null;
    artificialLimb?: boolean | null;
    dentures?: boolean | null;
    eyeGlasses?: boolean | null;
}

export class InjuryTime implements IInjuryTime {
    hour?: string | null;
    minute?: string | null;
    amPm?: string | null;

    constructor(data?: IInjuryTime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hour = _data["hour"] !== undefined ? _data["hour"] : <any>null;
            this.minute = _data["minute"] !== undefined ? _data["minute"] : <any>null;
            this.amPm = _data["amPm"] !== undefined ? _data["amPm"] : <any>null;
        }
    }

    static fromJS(data: any): InjuryTime {
        data = typeof data === 'object' ? data : {};
        let result = new InjuryTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hour"] = this.hour !== undefined ? this.hour : <any>null;
        data["minute"] = this.minute !== undefined ? this.minute : <any>null;
        data["amPm"] = this.amPm !== undefined ? this.amPm : <any>null;
        return data;
    }
}

export interface IInjuryTime {
    hour?: string | null;
    minute?: string | null;
    amPm?: string | null;
}

export class JsonReportOfInjury implements IJsonReportOfInjury {
    roiType?: RoiTypeName;
    personalAndContactInformation?: PersonalAndContactInformation;
    injuryAndIncident?: InjuryAndIncident;
    treatmentDetails?: TreatmentDetails;
    employmentAndEmployerInfo?: EmploymentAndEmployerInfo;

    constructor(data?: IJsonReportOfInjury) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roiType = _data["roiType"] !== undefined ? _data["roiType"] : <any>null;
            this.personalAndContactInformation = _data["personalAndContactInformation"] ? PersonalAndContactInformation.fromJS(_data["personalAndContactInformation"]) : <any>null;
            this.injuryAndIncident = _data["injuryAndIncident"] ? InjuryAndIncident.fromJS(_data["injuryAndIncident"]) : <any>null;
            this.treatmentDetails = _data["treatmentDetails"] ? TreatmentDetails.fromJS(_data["treatmentDetails"]) : <any>null;
            this.employmentAndEmployerInfo = _data["employmentAndEmployerInfo"] ? EmploymentAndEmployerInfo.fromJS(_data["employmentAndEmployerInfo"]) : <any>null;
        }
    }

    static fromJS(data: any): JsonReportOfInjury {
        data = typeof data === 'object' ? data : {};
        let result = new JsonReportOfInjury();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roiType"] = this.roiType !== undefined ? this.roiType : <any>null;
        data["personalAndContactInformation"] = this.personalAndContactInformation ? this.personalAndContactInformation.toJSON() : <any>null;
        data["injuryAndIncident"] = this.injuryAndIncident ? this.injuryAndIncident.toJSON() : <any>null;
        data["treatmentDetails"] = this.treatmentDetails ? this.treatmentDetails.toJSON() : <any>null;
        data["employmentAndEmployerInfo"] = this.employmentAndEmployerInfo ? this.employmentAndEmployerInfo.toJSON() : <any>null;
        return data;
    }
}

export interface IJsonReportOfInjury {
    roiType?: RoiTypeName;
    personalAndContactInformation?: PersonalAndContactInformation;
    injuryAndIncident?: InjuryAndIncident;
    treatmentDetails?: TreatmentDetails;
    employmentAndEmployerInfo?: EmploymentAndEmployerInfo;
}

export type MaintainedFullSalaryLength = "UntilRecovered" | "LimitedTime" | "NotSure";

export class MedicalCare implements IMedicalCare {
    haveReceivedFirstAid?: boolean | null;
    dateReceivedFirstAid?: string | null;
    typeOfFirstAidReceived?: string | null;
    haveVisitedPractitioner?: boolean | null;
    dateReceivedTreatment?: string | null;
    isApproximateDate?: boolean | null;
    clinicOrHospitalName?: string | null;
    practitionerName?: string | null;
    practitionerLastName?: string | null;
    clinicOrHospitalAddress?: string | null;
    clinicOrHospitalPhoneNumber?: string | null;
    clinicTreatmentDetails?: string | null;
    haveAppointmentBooked?: boolean | null;
    firstAidReceivedDateApproximateIndicator?: boolean | null;

    constructor(data?: IMedicalCare) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.haveReceivedFirstAid = _data["haveReceivedFirstAid"] !== undefined ? _data["haveReceivedFirstAid"] : <any>null;
            this.dateReceivedFirstAid = _data["dateReceivedFirstAid"] !== undefined ? _data["dateReceivedFirstAid"] : <any>null;
            this.typeOfFirstAidReceived = _data["typeOfFirstAidReceived"] !== undefined ? _data["typeOfFirstAidReceived"] : <any>null;
            this.haveVisitedPractitioner = _data["haveVisitedPractitioner"] !== undefined ? _data["haveVisitedPractitioner"] : <any>null;
            this.dateReceivedTreatment = _data["dateReceivedTreatment"] !== undefined ? _data["dateReceivedTreatment"] : <any>null;
            this.isApproximateDate = _data["isApproximateDate"] !== undefined ? _data["isApproximateDate"] : <any>null;
            this.clinicOrHospitalName = _data["clinicOrHospitalName"] !== undefined ? _data["clinicOrHospitalName"] : <any>null;
            this.practitionerName = _data["practitionerName"] !== undefined ? _data["practitionerName"] : <any>null;
            this.practitionerLastName = _data["practitionerLastName"] !== undefined ? _data["practitionerLastName"] : <any>null;
            this.clinicOrHospitalAddress = _data["clinicOrHospitalAddress"] !== undefined ? _data["clinicOrHospitalAddress"] : <any>null;
            this.clinicOrHospitalPhoneNumber = _data["clinicOrHospitalPhoneNumber"] !== undefined ? _data["clinicOrHospitalPhoneNumber"] : <any>null;
            this.clinicTreatmentDetails = _data["clinicTreatmentDetails"] !== undefined ? _data["clinicTreatmentDetails"] : <any>null;
            this.haveAppointmentBooked = _data["haveAppointmentBooked"] !== undefined ? _data["haveAppointmentBooked"] : <any>null;
            this.firstAidReceivedDateApproximateIndicator = _data["firstAidReceivedDateApproximateIndicator"] !== undefined ? _data["firstAidReceivedDateApproximateIndicator"] : <any>null;
        }
    }

    static fromJS(data: any): MedicalCare {
        data = typeof data === 'object' ? data : {};
        let result = new MedicalCare();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["haveReceivedFirstAid"] = this.haveReceivedFirstAid !== undefined ? this.haveReceivedFirstAid : <any>null;
        data["dateReceivedFirstAid"] = this.dateReceivedFirstAid !== undefined ? this.dateReceivedFirstAid : <any>null;
        data["typeOfFirstAidReceived"] = this.typeOfFirstAidReceived !== undefined ? this.typeOfFirstAidReceived : <any>null;
        data["haveVisitedPractitioner"] = this.haveVisitedPractitioner !== undefined ? this.haveVisitedPractitioner : <any>null;
        data["dateReceivedTreatment"] = this.dateReceivedTreatment !== undefined ? this.dateReceivedTreatment : <any>null;
        data["isApproximateDate"] = this.isApproximateDate !== undefined ? this.isApproximateDate : <any>null;
        data["clinicOrHospitalName"] = this.clinicOrHospitalName !== undefined ? this.clinicOrHospitalName : <any>null;
        data["practitionerName"] = this.practitionerName !== undefined ? this.practitionerName : <any>null;
        data["practitionerLastName"] = this.practitionerLastName !== undefined ? this.practitionerLastName : <any>null;
        data["clinicOrHospitalAddress"] = this.clinicOrHospitalAddress !== undefined ? this.clinicOrHospitalAddress : <any>null;
        data["clinicOrHospitalPhoneNumber"] = this.clinicOrHospitalPhoneNumber !== undefined ? this.clinicOrHospitalPhoneNumber : <any>null;
        data["clinicTreatmentDetails"] = this.clinicTreatmentDetails !== undefined ? this.clinicTreatmentDetails : <any>null;
        data["haveAppointmentBooked"] = this.haveAppointmentBooked !== undefined ? this.haveAppointmentBooked : <any>null;
        data["firstAidReceivedDateApproximateIndicator"] = this.firstAidReceivedDateApproximateIndicator !== undefined ? this.firstAidReceivedDateApproximateIndicator : <any>null;
        return data;
    }
}

export interface IMedicalCare {
    haveReceivedFirstAid?: boolean | null;
    dateReceivedFirstAid?: string | null;
    typeOfFirstAidReceived?: string | null;
    haveVisitedPractitioner?: boolean | null;
    dateReceivedTreatment?: string | null;
    isApproximateDate?: boolean | null;
    clinicOrHospitalName?: string | null;
    practitionerName?: string | null;
    practitionerLastName?: string | null;
    clinicOrHospitalAddress?: string | null;
    clinicOrHospitalPhoneNumber?: string | null;
    clinicTreatmentDetails?: string | null;
    haveAppointmentBooked?: boolean | null;
    firstAidReceivedDateApproximateIndicator?: boolean | null;
}

export class MissedTimeFromWork implements IMissedTimeFromWork {
    notMissed?: string | null;
    missedDayShift?: string | null;

    constructor(data?: IMissedTimeFromWork) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.notMissed = _data["notMissed"] !== undefined ? _data["notMissed"] : <any>null;
            this.missedDayShift = _data["missedDayShift"] !== undefined ? _data["missedDayShift"] : <any>null;
        }
    }

    static fromJS(data: any): MissedTimeFromWork {
        data = typeof data === 'object' ? data : {};
        let result = new MissedTimeFromWork();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["notMissed"] = this.notMissed !== undefined ? this.notMissed : <any>null;
        data["missedDayShift"] = this.missedDayShift !== undefined ? this.missedDayShift : <any>null;
        return data;
    }
}

export interface IMissedTimeFromWork {
    notMissed?: string | null;
    missedDayShift?: string | null;
}

export class PatternDetail implements IPatternDetail {
    daysOn?: number | null;
    daysOff?: number | null;

    constructor(data?: IPatternDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.daysOn = _data["daysOn"] !== undefined ? _data["daysOn"] : <any>null;
            this.daysOff = _data["daysOff"] !== undefined ? _data["daysOff"] : <any>null;
        }
    }

    static fromJS(data: any): PatternDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatternDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["daysOn"] = this.daysOn !== undefined ? this.daysOn : <any>null;
        data["daysOff"] = this.daysOff !== undefined ? this.daysOff : <any>null;
        return data;
    }
}

export interface IPatternDetail {
    daysOn?: number | null;
    daysOff?: number | null;
}

export class PaychequeAffected implements IPaychequeAffected {
    payAffectedByRegularHours?: boolean | null;
    payAffectedByOvertime?: boolean | null;
    payAffectedByAdjustedDuties?: boolean | null;
    payUnaffectedStillReceivingWage?: boolean | null;
    payUnaffectedNoImpact?: boolean | null;
    payUnaffectedUnknown?: boolean | null;

    constructor(data?: IPaychequeAffected) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.payAffectedByRegularHours = _data["payAffectedByRegularHours"] !== undefined ? _data["payAffectedByRegularHours"] : <any>null;
            this.payAffectedByOvertime = _data["payAffectedByOvertime"] !== undefined ? _data["payAffectedByOvertime"] : <any>null;
            this.payAffectedByAdjustedDuties = _data["payAffectedByAdjustedDuties"] !== undefined ? _data["payAffectedByAdjustedDuties"] : <any>null;
            this.payUnaffectedStillReceivingWage = _data["payUnaffectedStillReceivingWage"] !== undefined ? _data["payUnaffectedStillReceivingWage"] : <any>null;
            this.payUnaffectedNoImpact = _data["payUnaffectedNoImpact"] !== undefined ? _data["payUnaffectedNoImpact"] : <any>null;
            this.payUnaffectedUnknown = _data["payUnaffectedUnknown"] !== undefined ? _data["payUnaffectedUnknown"] : <any>null;
        }
    }

    static fromJS(data: any): PaychequeAffected {
        data = typeof data === 'object' ? data : {};
        let result = new PaychequeAffected();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["payAffectedByRegularHours"] = this.payAffectedByRegularHours !== undefined ? this.payAffectedByRegularHours : <any>null;
        data["payAffectedByOvertime"] = this.payAffectedByOvertime !== undefined ? this.payAffectedByOvertime : <any>null;
        data["payAffectedByAdjustedDuties"] = this.payAffectedByAdjustedDuties !== undefined ? this.payAffectedByAdjustedDuties : <any>null;
        data["payUnaffectedStillReceivingWage"] = this.payUnaffectedStillReceivingWage !== undefined ? this.payUnaffectedStillReceivingWage : <any>null;
        data["payUnaffectedNoImpact"] = this.payUnaffectedNoImpact !== undefined ? this.payUnaffectedNoImpact : <any>null;
        data["payUnaffectedUnknown"] = this.payUnaffectedUnknown !== undefined ? this.payUnaffectedUnknown : <any>null;
        return data;
    }
}

export interface IPaychequeAffected {
    payAffectedByRegularHours?: boolean | null;
    payAffectedByOvertime?: boolean | null;
    payAffectedByAdjustedDuties?: boolean | null;
    payUnaffectedStillReceivingWage?: boolean | null;
    payUnaffectedNoImpact?: boolean | null;
    payUnaffectedUnknown?: boolean | null;
}

export type Period = "Hour" | "Day" | "Week" | "Month" | "Year";

export class PersonalAndContactInformation implements IPersonalAndContactInformation {
    additionalInformation?: AdditionalInformation;
    personalInformation?: PersonalInformation;
    contactInformation?: ContactInformation;
    emailConsent?: EmailConsent;
    representativeInformation?: RepresentativeInformation;

    constructor(data?: IPersonalAndContactInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.additionalInformation = _data["additionalInformation"] ? AdditionalInformation.fromJS(_data["additionalInformation"]) : <any>null;
            this.personalInformation = _data["personalInformation"] ? PersonalInformation.fromJS(_data["personalInformation"]) : <any>null;
            this.contactInformation = _data["contactInformation"] ? ContactInformation.fromJS(_data["contactInformation"]) : <any>null;
            this.emailConsent = _data["emailConsent"] ? EmailConsent.fromJS(_data["emailConsent"]) : <any>null;
            this.representativeInformation = _data["representativeInformation"] ? RepresentativeInformation.fromJS(_data["representativeInformation"]) : <any>null;
        }
    }

    static fromJS(data: any): PersonalAndContactInformation {
        data = typeof data === 'object' ? data : {};
        let result = new PersonalAndContactInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["additionalInformation"] = this.additionalInformation ? this.additionalInformation.toJSON() : <any>null;
        data["personalInformation"] = this.personalInformation ? this.personalInformation.toJSON() : <any>null;
        data["contactInformation"] = this.contactInformation ? this.contactInformation.toJSON() : <any>null;
        data["emailConsent"] = this.emailConsent ? this.emailConsent.toJSON() : <any>null;
        data["representativeInformation"] = this.representativeInformation ? this.representativeInformation.toJSON() : <any>null;
        return data;
    }
}

export interface IPersonalAndContactInformation {
    additionalInformation?: AdditionalInformation;
    personalInformation?: PersonalInformation;
    contactInformation?: ContactInformation;
    emailConsent?: EmailConsent;
    representativeInformation?: RepresentativeInformation;
}

export class PersonalInformation implements IPersonalInformation {
    haveClaimNumber?: boolean | null;
    claimNumber?: string | null;
    havePhn?: boolean | null;
    phn?: string | null;
    legalFirstName?: string | null;
    preferredFirstName?: string | null;
    middleName?: string | null;
    lastName?: string | null;
    dateOfBirth?: DateOfBirth;
    demographics?: Demographics;
    interpreter?: boolean | null;
    preferredLanguage?: string | null;
    heightFeet?: number | null;
    heightInches?: number | null;
    weight?: number | null;

    constructor(data?: IPersonalInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.haveClaimNumber = _data["haveClaimNumber"] !== undefined ? _data["haveClaimNumber"] : <any>null;
            this.claimNumber = _data["claimNumber"] !== undefined ? _data["claimNumber"] : <any>null;
            this.havePhn = _data["havePhn"] !== undefined ? _data["havePhn"] : <any>null;
            this.phn = _data["phn"] !== undefined ? _data["phn"] : <any>null;
            this.legalFirstName = _data["legalFirstName"] !== undefined ? _data["legalFirstName"] : <any>null;
            this.preferredFirstName = _data["preferredFirstName"] !== undefined ? _data["preferredFirstName"] : <any>null;
            this.middleName = _data["middleName"] !== undefined ? _data["middleName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.dateOfBirth = _data["dateOfBirth"] ? DateOfBirth.fromJS(_data["dateOfBirth"]) : <any>null;
            this.demographics = _data["demographics"] ? Demographics.fromJS(_data["demographics"]) : <any>null;
            this.interpreter = _data["interpreter"] !== undefined ? _data["interpreter"] : <any>null;
            this.preferredLanguage = _data["preferredLanguage"] !== undefined ? _data["preferredLanguage"] : <any>null;
            this.heightFeet = _data["heightFeet"] !== undefined ? _data["heightFeet"] : <any>null;
            this.heightInches = _data["heightInches"] !== undefined ? _data["heightInches"] : <any>null;
            this.weight = _data["weight"] !== undefined ? _data["weight"] : <any>null;
        }
    }

    static fromJS(data: any): PersonalInformation {
        data = typeof data === 'object' ? data : {};
        let result = new PersonalInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["haveClaimNumber"] = this.haveClaimNumber !== undefined ? this.haveClaimNumber : <any>null;
        data["claimNumber"] = this.claimNumber !== undefined ? this.claimNumber : <any>null;
        data["havePhn"] = this.havePhn !== undefined ? this.havePhn : <any>null;
        data["phn"] = this.phn !== undefined ? this.phn : <any>null;
        data["legalFirstName"] = this.legalFirstName !== undefined ? this.legalFirstName : <any>null;
        data["preferredFirstName"] = this.preferredFirstName !== undefined ? this.preferredFirstName : <any>null;
        data["middleName"] = this.middleName !== undefined ? this.middleName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toJSON() : <any>null;
        data["demographics"] = this.demographics ? this.demographics.toJSON() : <any>null;
        data["interpreter"] = this.interpreter !== undefined ? this.interpreter : <any>null;
        data["preferredLanguage"] = this.preferredLanguage !== undefined ? this.preferredLanguage : <any>null;
        data["heightFeet"] = this.heightFeet !== undefined ? this.heightFeet : <any>null;
        data["heightInches"] = this.heightInches !== undefined ? this.heightInches : <any>null;
        data["weight"] = this.weight !== undefined ? this.weight : <any>null;
        return data;
    }
}

export interface IPersonalInformation {
    haveClaimNumber?: boolean | null;
    claimNumber?: string | null;
    havePhn?: boolean | null;
    phn?: string | null;
    legalFirstName?: string | null;
    preferredFirstName?: string | null;
    middleName?: string | null;
    lastName?: string | null;
    dateOfBirth?: DateOfBirth;
    demographics?: Demographics;
    interpreter?: boolean | null;
    preferredLanguage?: string | null;
    heightFeet?: number | null;
    heightInches?: number | null;
    weight?: number | null;
}

export class PhoneDto implements IPhoneDto {
    homePhone?: string | null;
    workPhone?: string | null;
    cellPhone?: string | null;
    extension?: string | null;

    constructor(data?: IPhoneDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.homePhone = _data["homePhone"] !== undefined ? _data["homePhone"] : <any>null;
            this.workPhone = _data["workPhone"] !== undefined ? _data["workPhone"] : <any>null;
            this.cellPhone = _data["cellPhone"] !== undefined ? _data["cellPhone"] : <any>null;
            this.extension = _data["extension"] !== undefined ? _data["extension"] : <any>null;
        }
    }

    static fromJS(data: any): PhoneDto {
        data = typeof data === 'object' ? data : {};
        let result = new PhoneDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["homePhone"] = this.homePhone !== undefined ? this.homePhone : <any>null;
        data["workPhone"] = this.workPhone !== undefined ? this.workPhone : <any>null;
        data["cellPhone"] = this.cellPhone !== undefined ? this.cellPhone : <any>null;
        data["extension"] = this.extension !== undefined ? this.extension : <any>null;
        return data;
    }
}

export interface IPhoneDto {
    homePhone?: string | null;
    workPhone?: string | null;
    cellPhone?: string | null;
    extension?: string | null;
}

export class PhoneNumbers implements IPhoneNumbers {
    homePhone?: string | null;
    cellPhone?: string | null;
    workPhone?: string | null;
    extension?: string | null;

    constructor(data?: IPhoneNumbers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.homePhone = _data["homePhone"] !== undefined ? _data["homePhone"] : <any>null;
            this.cellPhone = _data["cellPhone"] !== undefined ? _data["cellPhone"] : <any>null;
            this.workPhone = _data["workPhone"] !== undefined ? _data["workPhone"] : <any>null;
            this.extension = _data["extension"] !== undefined ? _data["extension"] : <any>null;
        }
    }

    static fromJS(data: any): PhoneNumbers {
        data = typeof data === 'object' ? data : {};
        let result = new PhoneNumbers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["homePhone"] = this.homePhone !== undefined ? this.homePhone : <any>null;
        data["cellPhone"] = this.cellPhone !== undefined ? this.cellPhone : <any>null;
        data["workPhone"] = this.workPhone !== undefined ? this.workPhone : <any>null;
        data["extension"] = this.extension !== undefined ? this.extension : <any>null;
        return data;
    }
}

export interface IPhoneNumbers {
    homePhone?: string | null;
    cellPhone?: string | null;
    workPhone?: string | null;
    extension?: string | null;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.detail = _data["detail"] !== undefined ? _data["detail"] : <any>null;
            this.instance = _data["instance"] !== undefined ? _data["instance"] : <any>null;
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["detail"] = this.detail !== undefined ? this.detail : <any>null;
        data["instance"] = this.instance !== undefined ? this.instance : <any>null;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;

    [key: string]: any;
}

export class ReportOfInjuryResponse implements IReportOfInjuryResponse {
    cmsReferenceNumber?: number;
    timestamp?: string;

    constructor(data?: IReportOfInjuryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cmsReferenceNumber = _data["cmsReferenceNumber"] !== undefined ? _data["cmsReferenceNumber"] : <any>null;
            this.timestamp = _data["timestamp"] !== undefined ? _data["timestamp"] : <any>null;
        }
    }

    static fromJS(data: any): ReportOfInjuryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ReportOfInjuryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cmsReferenceNumber"] = this.cmsReferenceNumber !== undefined ? this.cmsReferenceNumber : <any>null;
        data["timestamp"] = this.timestamp !== undefined ? this.timestamp : <any>null;
        return data;
    }
}

export interface IReportOfInjuryResponse {
    cmsReferenceNumber?: number;
    timestamp?: string;
}

export class ReportingToEmployer implements IReportingToEmployer {
    haveReportedInjury?: boolean | null;
    dateReportedInjury?: string | null;
    dateReportedInjuryIsApproximate?: boolean | null;
    whoReportedInjuryTo?: string | null;
    whyNotReportedInjury?: string | null;
    shouldContactForQuestions?: boolean | null;
    phoneNumber?: string | null;
    extension?: string | null;

    constructor(data?: IReportingToEmployer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.haveReportedInjury = _data["haveReportedInjury"] !== undefined ? _data["haveReportedInjury"] : <any>null;
            this.dateReportedInjury = _data["dateReportedInjury"] !== undefined ? _data["dateReportedInjury"] : <any>null;
            this.dateReportedInjuryIsApproximate = _data["dateReportedInjuryIsApproximate"] !== undefined ? _data["dateReportedInjuryIsApproximate"] : <any>null;
            this.whoReportedInjuryTo = _data["whoReportedInjuryTo"] !== undefined ? _data["whoReportedInjuryTo"] : <any>null;
            this.whyNotReportedInjury = _data["whyNotReportedInjury"] !== undefined ? _data["whyNotReportedInjury"] : <any>null;
            this.shouldContactForQuestions = _data["shouldContactForQuestions"] !== undefined ? _data["shouldContactForQuestions"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.extension = _data["extension"] !== undefined ? _data["extension"] : <any>null;
        }
    }

    static fromJS(data: any): ReportingToEmployer {
        data = typeof data === 'object' ? data : {};
        let result = new ReportingToEmployer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["haveReportedInjury"] = this.haveReportedInjury !== undefined ? this.haveReportedInjury : <any>null;
        data["dateReportedInjury"] = this.dateReportedInjury !== undefined ? this.dateReportedInjury : <any>null;
        data["dateReportedInjuryIsApproximate"] = this.dateReportedInjuryIsApproximate !== undefined ? this.dateReportedInjuryIsApproximate : <any>null;
        data["whoReportedInjuryTo"] = this.whoReportedInjuryTo !== undefined ? this.whoReportedInjuryTo : <any>null;
        data["whyNotReportedInjury"] = this.whyNotReportedInjury !== undefined ? this.whyNotReportedInjury : <any>null;
        data["shouldContactForQuestions"] = this.shouldContactForQuestions !== undefined ? this.shouldContactForQuestions : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["extension"] = this.extension !== undefined ? this.extension : <any>null;
        return data;
    }
}

export interface IReportingToEmployer {
    haveReportedInjury?: boolean | null;
    dateReportedInjury?: string | null;
    dateReportedInjuryIsApproximate?: boolean | null;
    whoReportedInjuryTo?: string | null;
    whyNotReportedInjury?: string | null;
    shouldContactForQuestions?: boolean | null;
    phoneNumber?: string | null;
    extension?: string | null;
}

export class RepresentativeInformation implements IRepresentativeInformation {
    reportingForSelf?: boolean | null;
    firstName?: string | null;
    lastName?: string | null;
    phoneNumber?: string | null;
    relationship?: RepresentativeRelationshipType;
    relationshipOther?: string | null;

    constructor(data?: IRepresentativeInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reportingForSelf = _data["reportingForSelf"] !== undefined ? _data["reportingForSelf"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.relationship = _data["relationship"] !== undefined ? _data["relationship"] : <any>null;
            this.relationshipOther = _data["relationshipOther"] !== undefined ? _data["relationshipOther"] : <any>null;
        }
    }

    static fromJS(data: any): RepresentativeInformation {
        data = typeof data === 'object' ? data : {};
        let result = new RepresentativeInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reportingForSelf"] = this.reportingForSelf !== undefined ? this.reportingForSelf : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["relationship"] = this.relationship !== undefined ? this.relationship : <any>null;
        data["relationshipOther"] = this.relationshipOther !== undefined ? this.relationshipOther : <any>null;
        return data;
    }
}

export interface IRepresentativeInformation {
    reportingForSelf?: boolean | null;
    firstName?: string | null;
    lastName?: string | null;
    phoneNumber?: string | null;
    relationship?: RepresentativeRelationshipType;
    relationshipOther?: string | null;
}

export type RepresentativeRelationshipType = "Coworker" | "Spouse" | "OtherFamily" | "UnionRepresentative" | "Other";

export class ReturnToWork implements IReturnToWork {
    missedTimeFromWorkAfterInjury?: YesNoNotSure;
    dateOfFirstMissedShiftAfterInjury?: string | null;
    dateOfFirstMissedShiftAfterInjuryIsApproximate?: boolean | null;
    lastDayWorkedForEmployer?: string | null;
    lastDayWorkedForEmployerIsApproximate?: boolean | null;
    workedPastDateOfInjury?: boolean | null;
    lastDayWorkedScheduledHours?: number | null;
    lastDayWorkedActualHours?: number | null;
    haveReturnedToWork?: HaveReturnedToWork;
    noJobDescription?: string | null;
    dateReturnedToWork?: string | null;
    dateReturnedToWorkIsApproximate?: boolean | null;
    changesToHoursOrDuties?: boolean | null;
    changesToHoursOrDutiesDescription?: string | null;
    estimatedReturnToWork?: EstimatedReturnToWork;
    nextScheduledShiftDate?: string | null;
    employerOfferedModifiedDuties?: boolean | null;
    acceptedModifiedDuties?: AcceptedModifiedDuties;
    modifiedDutiesOfferDate?: string | null;
    modifiedDutiesStartDate?: string | null;
    modifiedDutiesStartDateIsApproximate?: boolean | null;
    modifiedDutiesDescription?: string | null;

    constructor(data?: IReturnToWork) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.missedTimeFromWorkAfterInjury = _data["missedTimeFromWorkAfterInjury"] !== undefined ? _data["missedTimeFromWorkAfterInjury"] : <any>null;
            this.dateOfFirstMissedShiftAfterInjury = _data["dateOfFirstMissedShiftAfterInjury"] !== undefined ? _data["dateOfFirstMissedShiftAfterInjury"] : <any>null;
            this.dateOfFirstMissedShiftAfterInjuryIsApproximate = _data["dateOfFirstMissedShiftAfterInjuryIsApproximate"] !== undefined ? _data["dateOfFirstMissedShiftAfterInjuryIsApproximate"] : <any>null;
            this.lastDayWorkedForEmployer = _data["lastDayWorkedForEmployer"] !== undefined ? _data["lastDayWorkedForEmployer"] : <any>null;
            this.lastDayWorkedForEmployerIsApproximate = _data["lastDayWorkedForEmployerIsApproximate"] !== undefined ? _data["lastDayWorkedForEmployerIsApproximate"] : <any>null;
            this.workedPastDateOfInjury = _data["workedPastDateOfInjury"] !== undefined ? _data["workedPastDateOfInjury"] : <any>null;
            this.lastDayWorkedScheduledHours = _data["lastDayWorkedScheduledHours"] !== undefined ? _data["lastDayWorkedScheduledHours"] : <any>null;
            this.lastDayWorkedActualHours = _data["lastDayWorkedActualHours"] !== undefined ? _data["lastDayWorkedActualHours"] : <any>null;
            this.haveReturnedToWork = _data["haveReturnedToWork"] !== undefined ? _data["haveReturnedToWork"] : <any>null;
            this.noJobDescription = _data["noJobDescription"] !== undefined ? _data["noJobDescription"] : <any>null;
            this.dateReturnedToWork = _data["dateReturnedToWork"] !== undefined ? _data["dateReturnedToWork"] : <any>null;
            this.dateReturnedToWorkIsApproximate = _data["dateReturnedToWorkIsApproximate"] !== undefined ? _data["dateReturnedToWorkIsApproximate"] : <any>null;
            this.changesToHoursOrDuties = _data["changesToHoursOrDuties"] !== undefined ? _data["changesToHoursOrDuties"] : <any>null;
            this.changesToHoursOrDutiesDescription = _data["changesToHoursOrDutiesDescription"] !== undefined ? _data["changesToHoursOrDutiesDescription"] : <any>null;
            this.estimatedReturnToWork = _data["estimatedReturnToWork"] !== undefined ? _data["estimatedReturnToWork"] : <any>null;
            this.nextScheduledShiftDate = _data["nextScheduledShiftDate"] !== undefined ? _data["nextScheduledShiftDate"] : <any>null;
            this.employerOfferedModifiedDuties = _data["employerOfferedModifiedDuties"] !== undefined ? _data["employerOfferedModifiedDuties"] : <any>null;
            this.acceptedModifiedDuties = _data["acceptedModifiedDuties"] !== undefined ? _data["acceptedModifiedDuties"] : <any>null;
            this.modifiedDutiesOfferDate = _data["modifiedDutiesOfferDate"] !== undefined ? _data["modifiedDutiesOfferDate"] : <any>null;
            this.modifiedDutiesStartDate = _data["modifiedDutiesStartDate"] !== undefined ? _data["modifiedDutiesStartDate"] : <any>null;
            this.modifiedDutiesStartDateIsApproximate = _data["modifiedDutiesStartDateIsApproximate"] !== undefined ? _data["modifiedDutiesStartDateIsApproximate"] : <any>null;
            this.modifiedDutiesDescription = _data["modifiedDutiesDescription"] !== undefined ? _data["modifiedDutiesDescription"] : <any>null;
        }
    }

    static fromJS(data: any): ReturnToWork {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnToWork();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["missedTimeFromWorkAfterInjury"] = this.missedTimeFromWorkAfterInjury !== undefined ? this.missedTimeFromWorkAfterInjury : <any>null;
        data["dateOfFirstMissedShiftAfterInjury"] = this.dateOfFirstMissedShiftAfterInjury !== undefined ? this.dateOfFirstMissedShiftAfterInjury : <any>null;
        data["dateOfFirstMissedShiftAfterInjuryIsApproximate"] = this.dateOfFirstMissedShiftAfterInjuryIsApproximate !== undefined ? this.dateOfFirstMissedShiftAfterInjuryIsApproximate : <any>null;
        data["lastDayWorkedForEmployer"] = this.lastDayWorkedForEmployer !== undefined ? this.lastDayWorkedForEmployer : <any>null;
        data["lastDayWorkedForEmployerIsApproximate"] = this.lastDayWorkedForEmployerIsApproximate !== undefined ? this.lastDayWorkedForEmployerIsApproximate : <any>null;
        data["workedPastDateOfInjury"] = this.workedPastDateOfInjury !== undefined ? this.workedPastDateOfInjury : <any>null;
        data["lastDayWorkedScheduledHours"] = this.lastDayWorkedScheduledHours !== undefined ? this.lastDayWorkedScheduledHours : <any>null;
        data["lastDayWorkedActualHours"] = this.lastDayWorkedActualHours !== undefined ? this.lastDayWorkedActualHours : <any>null;
        data["haveReturnedToWork"] = this.haveReturnedToWork !== undefined ? this.haveReturnedToWork : <any>null;
        data["noJobDescription"] = this.noJobDescription !== undefined ? this.noJobDescription : <any>null;
        data["dateReturnedToWork"] = this.dateReturnedToWork !== undefined ? this.dateReturnedToWork : <any>null;
        data["dateReturnedToWorkIsApproximate"] = this.dateReturnedToWorkIsApproximate !== undefined ? this.dateReturnedToWorkIsApproximate : <any>null;
        data["changesToHoursOrDuties"] = this.changesToHoursOrDuties !== undefined ? this.changesToHoursOrDuties : <any>null;
        data["changesToHoursOrDutiesDescription"] = this.changesToHoursOrDutiesDescription !== undefined ? this.changesToHoursOrDutiesDescription : <any>null;
        data["estimatedReturnToWork"] = this.estimatedReturnToWork !== undefined ? this.estimatedReturnToWork : <any>null;
        data["nextScheduledShiftDate"] = this.nextScheduledShiftDate !== undefined ? this.nextScheduledShiftDate : <any>null;
        data["employerOfferedModifiedDuties"] = this.employerOfferedModifiedDuties !== undefined ? this.employerOfferedModifiedDuties : <any>null;
        data["acceptedModifiedDuties"] = this.acceptedModifiedDuties !== undefined ? this.acceptedModifiedDuties : <any>null;
        data["modifiedDutiesOfferDate"] = this.modifiedDutiesOfferDate !== undefined ? this.modifiedDutiesOfferDate : <any>null;
        data["modifiedDutiesStartDate"] = this.modifiedDutiesStartDate !== undefined ? this.modifiedDutiesStartDate : <any>null;
        data["modifiedDutiesStartDateIsApproximate"] = this.modifiedDutiesStartDateIsApproximate !== undefined ? this.modifiedDutiesStartDateIsApproximate : <any>null;
        data["modifiedDutiesDescription"] = this.modifiedDutiesDescription !== undefined ? this.modifiedDutiesDescription : <any>null;
        return data;
    }
}

export interface IReturnToWork {
    missedTimeFromWorkAfterInjury?: YesNoNotSure;
    dateOfFirstMissedShiftAfterInjury?: string | null;
    dateOfFirstMissedShiftAfterInjuryIsApproximate?: boolean | null;
    lastDayWorkedForEmployer?: string | null;
    lastDayWorkedForEmployerIsApproximate?: boolean | null;
    workedPastDateOfInjury?: boolean | null;
    lastDayWorkedScheduledHours?: number | null;
    lastDayWorkedActualHours?: number | null;
    haveReturnedToWork?: HaveReturnedToWork;
    noJobDescription?: string | null;
    dateReturnedToWork?: string | null;
    dateReturnedToWorkIsApproximate?: boolean | null;
    changesToHoursOrDuties?: boolean | null;
    changesToHoursOrDutiesDescription?: string | null;
    estimatedReturnToWork?: EstimatedReturnToWork;
    nextScheduledShiftDate?: string | null;
    employerOfferedModifiedDuties?: boolean | null;
    acceptedModifiedDuties?: AcceptedModifiedDuties;
    modifiedDutiesOfferDate?: string | null;
    modifiedDutiesStartDate?: string | null;
    modifiedDutiesStartDateIsApproximate?: boolean | null;
    modifiedDutiesDescription?: string | null;
}

export type RoiTypeName = "Hco" | "Timeloss";

export class SaveDraftRequestDto implements ISaveDraftRequestDto {
    draftSchemaVersion?: number;
    draft?: any | null;
    injury?: string | null;
    progress?: number;
    workerName?: string | null;

    constructor(data?: ISaveDraftRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.draftSchemaVersion = _data["draftSchemaVersion"] !== undefined ? _data["draftSchemaVersion"] : <any>null;
            this.draft = _data["draft"] !== undefined ? _data["draft"] : <any>null;
            this.injury = _data["injury"] !== undefined ? _data["injury"] : <any>null;
            this.progress = _data["progress"] !== undefined ? _data["progress"] : <any>null;
            this.workerName = _data["workerName"] !== undefined ? _data["workerName"] : <any>null;
        }
    }

    static fromJS(data: any): SaveDraftRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new SaveDraftRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draftSchemaVersion"] = this.draftSchemaVersion !== undefined ? this.draftSchemaVersion : <any>null;
        data["draft"] = this.draft !== undefined ? this.draft : <any>null;
        data["injury"] = this.injury !== undefined ? this.injury : <any>null;
        data["progress"] = this.progress !== undefined ? this.progress : <any>null;
        data["workerName"] = this.workerName !== undefined ? this.workerName : <any>null;
        return data;
    }
}

export interface ISaveDraftRequestDto {
    draftSchemaVersion?: number;
    draft?: any | null;
    injury?: string | null;
    progress?: number;
    workerName?: string | null;
}

export class ShiftInformation implements IShiftInformation {
    workPattern?: WorkPattern;
    weekPaidHours?: WeekPaidHours;
    daysOnOffRotation?: DaysOnOffRotation;
    shiftPattern?: ShiftPattern;
    haveDaysNeverWorked?: boolean | null;
    daysNeverWorked?: DaySelection;
    averageWeeklyWorkHours?: number | null;
    additionalInformation?: string | null;

    constructor(data?: IShiftInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.workPattern = _data["workPattern"] !== undefined ? _data["workPattern"] : <any>null;
            this.weekPaidHours = _data["weekPaidHours"] ? WeekPaidHours.fromJS(_data["weekPaidHours"]) : <any>null;
            this.daysOnOffRotation = _data["daysOnOffRotation"] !== undefined ? _data["daysOnOffRotation"] : <any>null;
            this.shiftPattern = _data["shiftPattern"] ? ShiftPattern.fromJS(_data["shiftPattern"]) : <any>null;
            this.haveDaysNeverWorked = _data["haveDaysNeverWorked"] !== undefined ? _data["haveDaysNeverWorked"] : <any>null;
            this.daysNeverWorked = _data["daysNeverWorked"] ? DaySelection.fromJS(_data["daysNeverWorked"]) : <any>null;
            this.averageWeeklyWorkHours = _data["averageWeeklyWorkHours"] !== undefined ? _data["averageWeeklyWorkHours"] : <any>null;
            this.additionalInformation = _data["additionalInformation"] !== undefined ? _data["additionalInformation"] : <any>null;
        }
    }

    static fromJS(data: any): ShiftInformation {
        data = typeof data === 'object' ? data : {};
        let result = new ShiftInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workPattern"] = this.workPattern !== undefined ? this.workPattern : <any>null;
        data["weekPaidHours"] = this.weekPaidHours ? this.weekPaidHours.toJSON() : <any>null;
        data["daysOnOffRotation"] = this.daysOnOffRotation !== undefined ? this.daysOnOffRotation : <any>null;
        data["shiftPattern"] = this.shiftPattern ? this.shiftPattern.toJSON() : <any>null;
        data["haveDaysNeverWorked"] = this.haveDaysNeverWorked !== undefined ? this.haveDaysNeverWorked : <any>null;
        data["daysNeverWorked"] = this.daysNeverWorked ? this.daysNeverWorked.toJSON() : <any>null;
        data["averageWeeklyWorkHours"] = this.averageWeeklyWorkHours !== undefined ? this.averageWeeklyWorkHours : <any>null;
        data["additionalInformation"] = this.additionalInformation !== undefined ? this.additionalInformation : <any>null;
        return data;
    }
}

export interface IShiftInformation {
    workPattern?: WorkPattern;
    weekPaidHours?: WeekPaidHours;
    daysOnOffRotation?: DaysOnOffRotation;
    shiftPattern?: ShiftPattern;
    haveDaysNeverWorked?: boolean | null;
    daysNeverWorked?: DaySelection;
    averageWeeklyWorkHours?: number | null;
    additionalInformation?: string | null;
}

export class ShiftPattern implements IShiftPattern {
    firstDay?: string | null;
    pattern?: PatternDetail[] | null;

    constructor(data?: IShiftPattern) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstDay = _data["firstDay"] !== undefined ? _data["firstDay"] : <any>null;
            if (Array.isArray(_data["pattern"])) {
                this.pattern = [] as any;
                for (let item of _data["pattern"])
                    this.pattern!.push(PatternDetail.fromJS(item));
            }
            else {
                this.pattern = <any>null;
            }
        }
    }

    static fromJS(data: any): ShiftPattern {
        data = typeof data === 'object' ? data : {};
        let result = new ShiftPattern();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstDay"] = this.firstDay !== undefined ? this.firstDay : <any>null;
        if (Array.isArray(this.pattern)) {
            data["pattern"] = [];
            for (let item of this.pattern)
                data["pattern"].push(item.toJSON());
        }
        return data;
    }
}

export interface IShiftPattern {
    firstDay?: string | null;
    pattern?: PatternDetail[] | null;
}

export class SubBodyPart implements ISubBodyPart {
    isChecked?: boolean;
    imageSource?: string | null;
    text?: string | null;

    constructor(data?: ISubBodyPart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isChecked = _data["isChecked"] !== undefined ? _data["isChecked"] : <any>null;
            this.imageSource = _data["imageSource"] !== undefined ? _data["imageSource"] : <any>null;
            this.text = _data["text"] !== undefined ? _data["text"] : <any>null;
        }
    }

    static fromJS(data: any): SubBodyPart {
        data = typeof data === 'object' ? data : {};
        let result = new SubBodyPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isChecked"] = this.isChecked !== undefined ? this.isChecked : <any>null;
        data["imageSource"] = this.imageSource !== undefined ? this.imageSource : <any>null;
        data["text"] = this.text !== undefined ? this.text : <any>null;
        return data;
    }
}

export interface ISubBodyPart {
    isChecked?: boolean;
    imageSource?: string | null;
    text?: string | null;
}

export class TimelossIndicators implements ITimelossIndicators {
    injuriesEffectOnWork?: InjuriesEffectOnWork;
    paychequeAffected?: PaychequeAffected;

    constructor(data?: ITimelossIndicators) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.injuriesEffectOnWork = _data["injuriesEffectOnWork"] ? InjuriesEffectOnWork.fromJS(_data["injuriesEffectOnWork"]) : <any>null;
            this.paychequeAffected = _data["paychequeAffected"] ? PaychequeAffected.fromJS(_data["paychequeAffected"]) : <any>null;
        }
    }

    static fromJS(data: any): TimelossIndicators {
        data = typeof data === 'object' ? data : {};
        let result = new TimelossIndicators();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["injuriesEffectOnWork"] = this.injuriesEffectOnWork ? this.injuriesEffectOnWork.toJSON() : <any>null;
        data["paychequeAffected"] = this.paychequeAffected ? this.paychequeAffected.toJSON() : <any>null;
        return data;
    }
}

export interface ITimelossIndicators {
    injuriesEffectOnWork?: InjuriesEffectOnWork;
    paychequeAffected?: PaychequeAffected;
}

export class TreatmentDetails implements ITreatmentDetails {
    additionalInformation?: AdditionalInformation;
    medicalCare?: MedicalCare;
    authorization?: Authorization69W1;

    constructor(data?: ITreatmentDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.additionalInformation = _data["additionalInformation"] ? AdditionalInformation.fromJS(_data["additionalInformation"]) : <any>null;
            this.medicalCare = _data["medicalCare"] ? MedicalCare.fromJS(_data["medicalCare"]) : <any>null;
            this.authorization = _data["authorization"] ? Authorization69W1.fromJS(_data["authorization"]) : <any>null;
        }
    }

    static fromJS(data: any): TreatmentDetails {
        data = typeof data === 'object' ? data : {};
        let result = new TreatmentDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["additionalInformation"] = this.additionalInformation ? this.additionalInformation.toJSON() : <any>null;
        data["medicalCare"] = this.medicalCare ? this.medicalCare.toJSON() : <any>null;
        data["authorization"] = this.authorization ? this.authorization.toJSON() : <any>null;
        return data;
    }
}

export interface ITreatmentDetails {
    additionalInformation?: AdditionalInformation;
    medicalCare?: MedicalCare;
    authorization?: Authorization69W1;
}

export class WeekPaidHours implements IWeekPaidHours {
    monday?: HoursMinutes;
    tuesday?: HoursMinutes;
    wednesday?: HoursMinutes;
    thursday?: HoursMinutes;
    friday?: HoursMinutes;
    saturday?: HoursMinutes;
    sunday?: HoursMinutes;

    constructor(data?: IWeekPaidHours) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.monday = _data["monday"] ? HoursMinutes.fromJS(_data["monday"]) : <any>null;
            this.tuesday = _data["tuesday"] ? HoursMinutes.fromJS(_data["tuesday"]) : <any>null;
            this.wednesday = _data["wednesday"] ? HoursMinutes.fromJS(_data["wednesday"]) : <any>null;
            this.thursday = _data["thursday"] ? HoursMinutes.fromJS(_data["thursday"]) : <any>null;
            this.friday = _data["friday"] ? HoursMinutes.fromJS(_data["friday"]) : <any>null;
            this.saturday = _data["saturday"] ? HoursMinutes.fromJS(_data["saturday"]) : <any>null;
            this.sunday = _data["sunday"] ? HoursMinutes.fromJS(_data["sunday"]) : <any>null;
        }
    }

    static fromJS(data: any): WeekPaidHours {
        data = typeof data === 'object' ? data : {};
        let result = new WeekPaidHours();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["monday"] = this.monday ? this.monday.toJSON() : <any>null;
        data["tuesday"] = this.tuesday ? this.tuesday.toJSON() : <any>null;
        data["wednesday"] = this.wednesday ? this.wednesday.toJSON() : <any>null;
        data["thursday"] = this.thursday ? this.thursday.toJSON() : <any>null;
        data["friday"] = this.friday ? this.friday.toJSON() : <any>null;
        data["saturday"] = this.saturday ? this.saturday.toJSON() : <any>null;
        data["sunday"] = this.sunday ? this.sunday.toJSON() : <any>null;
        return data;
    }
}

export interface IWeekPaidHours {
    monday?: HoursMinutes;
    tuesday?: HoursMinutes;
    wednesday?: HoursMinutes;
    thursday?: HoursMinutes;
    friday?: HoursMinutes;
    saturday?: HoursMinutes;
    sunday?: HoursMinutes;
}

export type WeightLifted = "LessThan10Lbs" | "Between10And50Lbs" | "MoreThan50Lbs" | "NotSure";

export type WorkPattern = "SameShifts" | "RotatingShifts" | "NoPattern";

export class WorkerInformationDto implements IWorkerInformationDto {
    legalFirstName?: string | null;
    lastName?: string | null;
    middleName?: string | null;
    preferredFirstName?: string | null;
    email?: string | null;
    phone?: PhoneDto;

    constructor(data?: IWorkerInformationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.legalFirstName = _data["legalFirstName"] !== undefined ? _data["legalFirstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.middleName = _data["middleName"] !== undefined ? _data["middleName"] : <any>null;
            this.preferredFirstName = _data["preferredFirstName"] !== undefined ? _data["preferredFirstName"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.phone = _data["phone"] ? PhoneDto.fromJS(_data["phone"]) : <any>null;
        }
    }

    static fromJS(data: any): WorkerInformationDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkerInformationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["legalFirstName"] = this.legalFirstName !== undefined ? this.legalFirstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["middleName"] = this.middleName !== undefined ? this.middleName : <any>null;
        data["preferredFirstName"] = this.preferredFirstName !== undefined ? this.preferredFirstName : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["phone"] = this.phone ? this.phone.toJSON() : <any>null;
        return data;
    }
}

export interface IWorkerInformationDto {
    legalFirstName?: string | null;
    lastName?: string | null;
    middleName?: string | null;
    preferredFirstName?: string | null;
    email?: string | null;
    phone?: PhoneDto;
}

export type YesNoNotSure = "Yes" | "No" | "NotSure";

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}